
MCU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080060f0  080060f0  000160f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800647c  0800647c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001d8  0800665c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800665c  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c84c  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcc  00000000  00000000  0002ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000959  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e75  00000000  00000000  0002fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d89f  00000000  00000000  00046a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008effe  00000000  00000000  000542cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043f8  00000000  00000000  000e32cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e76c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d8 	.word	0x080060d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080060d8 	.word	0x080060d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <SysTick_Handler>:

#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim2;

void SysTick_Handler(void){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000eb8:	f000 fb8c 	bl	80015d4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ebc:	f000 fcbb 	bl	8001836 <HAL_SYSTICK_IRQHandler>

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM2_IRQHandler+0x10>)
 8000eca:	f001 fadd 	bl	8002488 <HAL_TIM_IRQHandler>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000023c 	.word	0x2000023c

08000ed8 <main>:
//		printf("hola mundo\n");
//		fflush(stdout);
	}
}

int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09a      	sub	sp, #104	; 0x68
 8000edc:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ede:	f000 fb27 	bl	8001530 <HAL_Init>
	char message[100];
	TIMER2_Init();
 8000ee2:	f000 f8c5 	bl	8001070 <TIMER2_Init>
	GPIO_LED_ROJO();
 8000ee6:	f000 f901 	bl	80010ec <GPIO_LED_ROJO>

	UART2_Init();
 8000eea:	f000 f895 	bl	8001018 <UART2_Init>

	//HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
	LSE_Configuration();
 8000eee:	f000 f95d 	bl	80011ac <LSE_Configuration>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	483c      	ldr	r0, [pc, #240]	; (8000fe8 <main+0x110>)
 8000ef6:	f001 f9ad 	bl	8002254 <HAL_TIM_IC_Start_IT>

	while(1){
		if(is_captured){
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <main+0x114>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0fb      	beq.n	8000efa <main+0x22>
			if(input_captures[1]>input_captures[0]){
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <main+0x118>)
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <main+0x118>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d907      	bls.n	8000f1e <main+0x46>
				capture_difference = input_captures[1]-input_captures[0];
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <main+0x118>)
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <main+0x118>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <main+0x11c>)
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e007      	b.n	8000f2e <main+0x56>
			}
			else{
				capture_difference = (0xFFFFFFFF-input_captures[0])+input_captures[1]; /// la primera resta calcula el tiempo antes del desbordamineto, y luego le suma lo que pasa despues del desbordamiento
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <main+0x118>)
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <main+0x118>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <main+0x11c>)
 8000f2c:	6013      	str	r3, [r2, #0]
			}
			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq())/(htim2.Init.Prescaler+1);
 8000f2e:	f001 f919 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8000f32:	4602      	mov	r2, r0
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <main+0x110>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fae8 	bl	8000514 <__aeabi_ui2d>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	492b      	ldr	r1, [pc, #172]	; (8000ff8 <main+0x120>)
 8000f4a:	e9c1 2300 	strd	r2, r3, [r1]
			timer2_cnt_res = 1/ timer2_cnt_freq;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <main+0x120>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4928      	ldr	r1, [pc, #160]	; (8000ffc <main+0x124>)
 8000f5a:	f7ff fc7f 	bl	800085c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <main+0x128>)
 8000f64:	e9c1 2300 	strd	r2, r3, [r1]
			user_signal_time_period = capture_difference*timer2_cnt_res;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <main+0x11c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fad1 	bl	8000514 <__aeabi_ui2d>
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <main+0x128>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fb46 	bl	8000608 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4920      	ldr	r1, [pc, #128]	; (8001004 <main+0x12c>)
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]
			user_signal_time_freq = (1/user_signal_time_period)/1000;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <main+0x12c>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f04f 0000 	mov.w	r0, #0
 8000f90:	491a      	ldr	r1, [pc, #104]	; (8000ffc <main+0x124>)
 8000f92:	f7ff fc63 	bl	800085c <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <main+0x130>)
 8000fa4:	f7ff fc5a 	bl	800085c <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4917      	ldr	r1, [pc, #92]	; (800100c <main+0x134>)
 8000fae:	e9c1 2300 	strd	r2, r3, [r1]
			sprintf(message, "%f kHz\r\n0",user_signal_time_freq);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <main+0x134>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	1d38      	adds	r0, r7, #4
 8000fba:	4915      	ldr	r1, [pc, #84]	; (8001010 <main+0x138>)
 8000fbc:	f002 ff2e 	bl	8003e1c <siprintf>
			while(HAL_UART_Transmit(&uart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY)!= HAL_OK);
 8000fc0:	bf00      	nop
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f95b 	bl	8000280 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	1d39      	adds	r1, r7, #4
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <main+0x13c>)
 8000fd6:	f001 fe3e 	bl	8002c56 <HAL_UART_Transmit>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <main+0xea>
			is_captured = false;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4b02      	ldr	r3, [pc, #8]	; (8000fec <main+0x114>)
 8000fe4:	701a      	strb	r2, [r3, #0]
		if(is_captured){
 8000fe6:	e788      	b.n	8000efa <main+0x22>
 8000fe8:	2000023c 	.word	0x2000023c
 8000fec:	200002b4 	.word	0x200002b4
 8000ff0:	200002a8 	.word	0x200002a8
 8000ff4:	200002b0 	.word	0x200002b0
 8000ff8:	200002b8 	.word	0x200002b8
 8000ffc:	3ff00000 	.word	0x3ff00000
 8001000:	200002c0 	.word	0x200002c0
 8001004:	200002c8 	.word	0x200002c8
 8001008:	408f4000 	.word	0x408f4000
 800100c:	200002d0 	.word	0x200002d0
 8001010:	080060f0 	.word	0x080060f0
 8001014:	200001f4 	.word	0x200001f4

08001018 <UART2_Init>:

	return 0;
}


void UART2_Init(void){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	uart1.Instance = USART6;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <UART2_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <UART2_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
	uart1.Init.BaudRate = 9600;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <UART2_Init+0x4c>)
 8001024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001028:	605a      	str	r2, [r3, #4]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <UART2_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
	uart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <UART2_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
	uart1.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <UART2_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <UART2_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
	uart1.Init.Mode = UART_MODE_TX_RX;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <UART2_Init+0x4c>)
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&uart1)!= HAL_OK){
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <UART2_Init+0x4c>)
 800104a:	f001 fdb4 	bl	8002bb6 <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <UART2_Init+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <UART2_Init+0x54>)
 800105a:	f000 fd7d 	bl	8001b58 <HAL_GPIO_WritePin>
		while(1);
 800105e:	e7fe      	b.n	800105e <UART2_Init+0x46>
	}

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200001f4 	.word	0x200001f4
 8001068:	40011400 	.word	0x40011400
 800106c:	40020400 	.word	0x40020400

08001070 <TIMER2_Init>:
	button.Speed = GPIO_SPEED_FREQ_LOW;
	__HAL_RCC_GPIOB_CLK_ENABLE();
	HAL_GPIO_Init(GPIOB, &button);
}

void TIMER2_Init(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <TIMER2_Init+0x70>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <TIMER2_Init+0x70>)
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
	htim2.Init.Period = 0xFFFFFFFF;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <TIMER2_Init+0x70>)
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	60da      	str	r2, [r3, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <TIMER2_Init+0x70>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_IC_Init(&htim2)!= HAL_OK){
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <TIMER2_Init+0x70>)
 8001092:	f001 f88f 	bl	80021b4 <HAL_TIM_IC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <TIMER2_Init+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2104      	movs	r1, #4
 80010a0:	4810      	ldr	r0, [pc, #64]	; (80010e4 <TIMER2_Init+0x74>)
 80010a2:	f000 fd59 	bl	8001b58 <HAL_GPIO_WritePin>
		while(1);
 80010a6:	e7fe      	b.n	80010a6 <TIMER2_Init+0x36>
	}
	timer2IC_Config.ICFilter = 0; /// sin filtro;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <TIMER2_Init+0x78>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
	timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING; /// DETECTA EN RISING EDGE
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <TIMER2_Init+0x78>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
	timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1; /// PRESCALER EN EL TIM
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <TIMER2_Init+0x78>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI; /// SELECCIONAR LA ENTRADA DIRECTA
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <TIMER2_Init+0x78>)
 80010bc:	2201      	movs	r2, #1
 80010be:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_IC_ConfigChannel(&htim2, &timer2IC_Config, TIM_CHANNEL_1)!= HAL_OK){ /// CONFIGURA EL CHANNEL 1 CON TOD/O LO ANTERIOR
 80010c0:	2200      	movs	r2, #0
 80010c2:	4909      	ldr	r1, [pc, #36]	; (80010e8 <TIMER2_Init+0x78>)
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <TIMER2_Init+0x70>)
 80010c6:	f001 facf 	bl	8002668 <HAL_TIM_IC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <TIMER2_Init+0x6c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2104      	movs	r1, #4
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <TIMER2_Init+0x74>)
 80010d6:	f000 fd3f 	bl	8001b58 <HAL_GPIO_WritePin>
		while(1);
 80010da:	e7fe      	b.n	80010da <TIMER2_Init+0x6a>
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000023c 	.word	0x2000023c
 80010e4:	40020400 	.word	0x40020400
 80010e8:	20000284 	.word	0x20000284

080010ec <GPIO_LED_ROJO>:

void GPIO_LED_ROJO(void){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	led_rojo.Pin = GPIO_PIN_2;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <GPIO_LED_ROJO+0x44>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	601a      	str	r2, [r3, #0]
	led_rojo.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <GPIO_LED_ROJO+0x44>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	605a      	str	r2, [r3, #4]
	led_rojo.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <GPIO_LED_ROJO+0x44>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <GPIO_LED_ROJO+0x48>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <GPIO_LED_ROJO+0x48>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <GPIO_LED_ROJO+0x48>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOB, &led_rojo);
 8001120:	4903      	ldr	r1, [pc, #12]	; (8001130 <GPIO_LED_ROJO+0x44>)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <GPIO_LED_ROJO+0x4c>)
 8001124:	f000 fb94 	bl	8001850 <HAL_GPIO_Init>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000294 	.word	0x20000294
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ /// se llama cuando pasa un rising en la señal (un capture)
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2104      	movs	r1, #4
 8001148:	4814      	ldr	r0, [pc, #80]	; (800119c <HAL_TIM_IC_CaptureCallback+0x60>)
 800114a:	f000 fd05 	bl	8001b58 <HAL_GPIO_WritePin>
	if(!is_captured){
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d11e      	bne.n	8001194 <HAL_TIM_IC_CaptureCallback+0x58>
		if(count == 1){
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_IC_CaptureCallback+0x3a>
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001166:	6013      	str	r3, [r2, #0]
			count++;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x68>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001172:	701a      	strb	r2, [r3, #0]
			count = 1;
			is_captured = true;
		}
	}

}
 8001174:	e00e      	b.n	8001194 <HAL_TIM_IC_CaptureCallback+0x58>
		else if(count==2){
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d10a      	bne.n	8001194 <HAL_TIM_IC_CaptureCallback+0x58>
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001186:	6053      	str	r3, [r2, #4]
			count = 1;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x68>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
			is_captured = true;
 800118e:	2201      	movs	r2, #1
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001192:	701a      	strb	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020400 	.word	0x40020400
 80011a0:	200002b4 	.word	0x200002b4
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200002a8 	.word	0x200002a8

080011ac <LSE_Configuration>:

void LSE_Configuration(void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef Osc_init;
	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80011b2:	2304      	movs	r3, #4
 80011b4:	603b      	str	r3, [r7, #0]
	Osc_init.LSEState = RCC_LSE_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
	if(HAL_RCC_OscConfig(&Osc_init)!= HAL_OK){
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fce5 	bl	8001b8c <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <LSE_Configuration+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2104      	movs	r1, #4
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <LSE_Configuration+0x3c>)
 80011ce:	f000 fcc3 	bl	8001b58 <HAL_GPIO_WritePin>
		while(1);
 80011d2:	e7fe      	b.n	80011d2 <LSE_Configuration+0x26>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 ff4e 	bl	800207c <HAL_RCC_MCOConfig>
}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_MspInit>:
 *      Author: osbit
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); /// aqui basicamente le dices al NVIC como quieres que gestione las interrupciones, y como es 4, predomina la preemcion, que significa que si ocurre una interrupcion y luego otra se presenta de manera inesperada, la primera la ignora y realiza la segunda si es tiene mayor prioridad
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 fadf 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>
	SCB->SHCSR |= (0x7<<16);//usage fault, memory fault y bus fault activados
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_MspInit+0x40>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_MspInit+0x40>)
 80011fc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001200:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0); // memory fault
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	f06f 000b 	mvn.w	r0, #11
 800120a:	f000 fade 	bl	80017ca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0); // bus fault
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	f06f 000a 	mvn.w	r0, #10
 8001216:	f000 fad8 	bl	80017ca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0); //usage fault
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	f06f 0009 	mvn.w	r0, #9
 8001222:	f000 fad2 	bl	80017ca <HAL_NVIC_SetPriority>

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart1;
	__HAL_RCC_USART6_CLK_ENABLE(); //reloj uart1/usart1
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x7c>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x7c>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6453      	str	r3, [r2, #68]	; 0x44
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x7c>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x7c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_UART_MspInit+0x7c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x7c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

	gpio_uart1.Pin = GPIO_PIN_11; //tx
 8001270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001274:	617b      	str	r3, [r7, #20]
	gpio_uart1.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
	gpio_uart1.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
	gpio_uart1.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	61fb      	str	r3, [r7, #28]
	gpio_uart1.Alternate = GPIO_AF8_USART6;
 8001282:	2308      	movs	r3, #8
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart1);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <HAL_UART_MspInit+0x80>)
 800128e:	f000 fadf 	bl	8001850 <HAL_GPIO_Init>

	gpio_uart1.Pin = GPIO_PIN_12;//rx
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart1);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <HAL_UART_MspInit+0x80>)
 80012a0:	f000 fad6 	bl	8001850 <HAL_GPIO_Init>

	//HAL_NVIC_EnableIRQ(USART2_IRQn); // por si quieres utilizar interrupciones con USART2
	//HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);// setear la prioridad de la interrupcion 15 solo por poner algo(no importa), el otro es cero porque la subprioridad es como un dont care

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_TIM_IC_MspInit>:
///	__HAL_RCC_TIM11_CLK_ENABLE();
///	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
//	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);/// LO MISMO QUE ARRIBA XD
//}  INICIALIZA EL TIM 11, LO COMENTE PORQUE VOY A USAR EL QUE ESTA ABAJO

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim){ /// ESTE ES PARA INICIARLO NO EN EL MODO DE ARRIBA, SINO CUANDO QUIERES UTILIZAR LOS CANALES DE ENTRADA Y SALIDA
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2ch1_gpio;
	__HAL_RCC_TIM2_CLK_ENABLE(); // INICIA EL RELOJ DEL TIM2
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_TIM_IC_MspInit+0x70>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
	tim2ch1_gpio.Pin = GPIO_PIN_0; //a0 channel 1
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
	tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <HAL_TIM_IC_MspInit+0x74>)
 8001308:	f000 faa2 	bl	8001850 <HAL_GPIO_Init>

	//nvic configuration
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	210f      	movs	r1, #15
 8001310:	201c      	movs	r0, #28
 8001312:	f000 fa5a 	bl	80017ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001316:	201c      	movs	r0, #28
 8001318:	f000 fa73 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return 1;
 8001330:	2301      	movs	r3, #1
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_kill>:

int _kill(int pid, int sig)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001346:	f002 fe1f 	bl	8003f88 <__errno>
 800134a:	4603      	mov	r3, r0
 800134c:	2216      	movs	r2, #22
 800134e:	601a      	str	r2, [r3, #0]
  return -1;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_exit>:

void _exit (int status)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe7 	bl	800133c <_kill>
  while (1) {}    /* Make sure we hang here */
 800136e:	e7fe      	b.n	800136e <_exit+0x12>

08001370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
  }

  return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
  }
  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f002 fd84 	bl	8003f88 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20018000 	.word	0x20018000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200002d8 	.word	0x200002d8
 80014b4:	20000430 	.word	0x20000430

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800150a:	f002 fd43 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fce3 	bl	8000ed8 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001520:	08006484 	.word	0x08006484
  ldr r2, =_sbss
 8001524:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001528:	2000042c 	.word	0x2000042c

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f92b 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fe42 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f943 	bl	800181e <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f90b 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000004 	.word	0x20000004
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	200002dc 	.word	0x200002dc

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200002dc 	.word	0x200002dc

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff29 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff3e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff31 	bl	8001678 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800183a:	f000 f802 	bl	8001842 <HAL_SYSTICK_Callback>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	e159      	b.n	8001b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8148 	bne.w	8001b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d005      	beq.n	80018a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d130      	bne.n	8001904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 0201 	and.w	r2, r3, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b03      	cmp	r3, #3
 800190e:	d017      	beq.n	8001940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d123      	bne.n	8001994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a2 	beq.w	8001b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_GPIO_Init+0x2ec>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a49      	ldr	r2, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_GPIO_Init+0x202>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2f4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x1fe>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <HAL_GPIO_Init+0x2f8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x1f6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x1f2>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a42:	2307      	movs	r3, #7
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a52:	2300      	movs	r3, #0
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a64:	4935      	ldr	r1, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x2ec>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aea:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f67f aea2 	bls.w	800186c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b74:	e003      	b.n	8001b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e267      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d075      	beq.n	8001c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb6:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d112      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bce:	d10b      	bne.n	8001be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	4b7e      	ldr	r3, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d05b      	beq.n	8001c94 <HAL_RCC_OscConfig+0x108>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d157      	bne.n	8001c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e242      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x74>
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0xb0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x98>
 8001c0a:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6c      	ldr	r2, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0xb0>
 8001c24:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a65      	ldr	r2, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fcda 	bl	80015fc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fcd6 	bl	80015fc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e207      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xc0>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fcc6 	bl	80015fc <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fcc2 	bl	80015fc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1f3      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0xe8>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x152>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1c7      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4937      	ldr	r1, [pc, #220]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCC_OscConfig+0x244>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc7b 	bl	80015fc <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc77 	bl	80015fc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1a8      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4925      	ldr	r1, [pc, #148]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x244>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc5a 	bl	80015fc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc56 	bl	80015fc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e187      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d036      	beq.n	8001de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x248>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fc3a 	bl	80015fc <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc36 	bl	80015fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e167      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x240>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x200>
 8001daa:	e01b      	b.n	8001de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_OscConfig+0x248>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fc23 	bl	80015fc <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	e00e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dba:	f7ff fc1f 	bl	80015fc <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d907      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e150      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470000 	.word	0x42470000
 8001dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ea      	bne.n	8001dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8097 	beq.w	8001f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b7d      	ldr	r3, [pc, #500]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a7c      	ldr	r2, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b77      	ldr	r3, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b74      	ldr	r3, [pc, #464]	; (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a73      	ldr	r2, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fbdf 	bl	80015fc <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff fbdb 	bl	80015fc <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e10c      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x474>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2ea>
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x324>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x30c>
 8001e7e:	4b5f      	ldr	r3, [pc, #380]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a5e      	ldr	r2, [pc, #376]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x324>
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	4b55      	ldr	r3, [pc, #340]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	4a54      	ldr	r2, [pc, #336]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fba0 	bl	80015fc <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fb9c 	bl	80015fc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0cb      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ee      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x334>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fb8a 	bl	80015fc <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb86 	bl	80015fc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0b5      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a1 	beq.w	800206c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d05c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d141      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCC_OscConfig+0x478>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb5a 	bl	80015fc <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff fb56 	bl	80015fc <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e087      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x478>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fb2f 	bl	80015fc <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fb2b 	bl	80015fc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e05c      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x416>
 8001fc0:	e054      	b.n	800206c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_OscConfig+0x478>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fb18 	bl	80015fc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff fb14 	bl	80015fc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e045      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x470>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x444>
 8001fee:	e03d      	b.n	800206c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e038      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000
 8002004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4ec>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d028      	beq.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d121      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d11a      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d129      	bne.n	80020e2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	481f      	ldr	r0, [pc, #124]	; (8002144 <HAL_RCC_MCOConfig+0xc8>)
 80020c8:	f7ff fbc2 	bl	8001850 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	430b      	orrs	r3, r1
 80020da:	4919      	ldr	r1, [pc, #100]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80020e0:	e029      	b.n	8002136 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <HAL_RCC_MCOConfig+0xcc>)
 800211c:	f7ff fb98 	bl	8001850 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	00d9      	lsls	r1, r3, #3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	430b      	orrs	r3, r1
 8002130:	4903      	ldr	r1, [pc, #12]	; (8002140 <HAL_RCC_MCOConfig+0xc4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
}
 8002136:	bf00      	nop
 8002138:	3730      	adds	r7, #48	; 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020800 	.word	0x40020800

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCC_GetHCLKFreq+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002168:	f7ff fff0 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0a9b      	lsrs	r3, r3, #10
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	080060fc 	.word	0x080060fc

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002190:	f7ff ffdc 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0b5b      	lsrs	r3, r3, #13
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40023800 	.word	0x40023800
 80021b0:	080060fc 	.word	0x080060fc

080021b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f86a 	bl	80012b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fafc 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <HAL_TIM_IC_Start_IT+0x1e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e013      	b.n	800229a <HAL_TIM_IC_Start_IT+0x46>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d104      	bne.n	8002282 <HAL_TIM_IC_Start_IT+0x2e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e00b      	b.n	800229a <HAL_TIM_IC_Start_IT+0x46>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d104      	bne.n	8002292 <HAL_TIM_IC_Start_IT+0x3e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	e003      	b.n	800229a <HAL_TIM_IC_Start_IT+0x46>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_TIM_IC_Start_IT+0x58>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e013      	b.n	80022d4 <HAL_TIM_IC_Start_IT+0x80>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d104      	bne.n	80022bc <HAL_TIM_IC_Start_IT+0x68>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	e00b      	b.n	80022d4 <HAL_TIM_IC_Start_IT+0x80>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d104      	bne.n	80022cc <HAL_TIM_IC_Start_IT+0x78>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e003      	b.n	80022d4 <HAL_TIM_IC_Start_IT+0x80>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022dc:	7b7b      	ldrb	r3, [r7, #13]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0c2      	b.n	800246c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_TIM_IC_Start_IT+0xa2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f4:	e013      	b.n	800231e <HAL_TIM_IC_Start_IT+0xca>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d104      	bne.n	8002306 <HAL_TIM_IC_Start_IT+0xb2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002304:	e00b      	b.n	800231e <HAL_TIM_IC_Start_IT+0xca>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b08      	cmp	r3, #8
 800230a:	d104      	bne.n	8002316 <HAL_TIM_IC_Start_IT+0xc2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002314:	e003      	b.n	800231e <HAL_TIM_IC_Start_IT+0xca>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <HAL_TIM_IC_Start_IT+0xda>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800232c:	e013      	b.n	8002356 <HAL_TIM_IC_Start_IT+0x102>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d104      	bne.n	800233e <HAL_TIM_IC_Start_IT+0xea>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800233c:	e00b      	b.n	8002356 <HAL_TIM_IC_Start_IT+0x102>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d104      	bne.n	800234e <HAL_TIM_IC_Start_IT+0xfa>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800234c:	e003      	b.n	8002356 <HAL_TIM_IC_Start_IT+0x102>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d841      	bhi.n	80023e0 <HAL_TIM_IC_Start_IT+0x18c>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_TIM_IC_Start_IT+0x110>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002399 	.word	0x08002399
 8002368:	080023e1 	.word	0x080023e1
 800236c:	080023e1 	.word	0x080023e1
 8002370:	080023e1 	.word	0x080023e1
 8002374:	080023ab 	.word	0x080023ab
 8002378:	080023e1 	.word	0x080023e1
 800237c:	080023e1 	.word	0x080023e1
 8002380:	080023e1 	.word	0x080023e1
 8002384:	080023bd 	.word	0x080023bd
 8002388:	080023e1 	.word	0x080023e1
 800238c:	080023e1 	.word	0x080023e1
 8002390:	080023e1 	.word	0x080023e1
 8002394:	080023cf 	.word	0x080023cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	60da      	str	r2, [r3, #12]
      break;
 80023a8:	e01d      	b.n	80023e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0204 	orr.w	r2, r2, #4
 80023b8:	60da      	str	r2, [r3, #12]
      break;
 80023ba:	e014      	b.n	80023e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	60da      	str	r2, [r3, #12]
      break;
 80023cc:	e00b      	b.n	80023e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0210 	orr.w	r2, r2, #16
 80023dc:	60da      	str	r2, [r3, #12]
      break;
 80023de:	e002      	b.n	80023e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13e      	bne.n	800246a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2201      	movs	r2, #1
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fba5 	bl	8002b44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_TIM_IC_Start_IT+0x220>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d018      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x1e2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d013      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x1e2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_TIM_IC_Start_IT+0x224>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x1e2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_TIM_IC_Start_IT+0x228>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x1e2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_TIM_IC_Start_IT+0x22c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_TIM_IC_Start_IT+0x1e2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_IC_Start_IT+0x230>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d111      	bne.n	800245a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d010      	beq.n	800246a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	e007      	b.n	800246a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40010000 	.word	0x40010000
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800
 8002480:	40000c00 	.word	0x40000c00
 8002484:	40014000 	.word	0x40014000

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d020      	beq.n	80024ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0202 	mvn.w	r2, #2
 80024bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fe32 	bl	800113c <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f96a 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f971 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fe0c 	bl	800113c <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f944 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f94b 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d020      	beq.n	8002584 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0208 	mvn.w	r2, #8
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2204      	movs	r2, #4
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fde6 	bl	800113c <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f91e 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f925 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0210 	mvn.w	r2, #16
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2208      	movs	r2, #8
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fdc0 	bl	800113c <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8f8 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8ff 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0201 	mvn.w	r2, #1
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8d6 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fac5 	bl	8002ba2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8d0 	bl	80027dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0220 	mvn.w	r2, #32
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa97 	bl	8002b8e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002682:	2302      	movs	r3, #2
 8002684:	e088      	b.n	8002798 <HAL_TIM_IC_ConfigChannel+0x130>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80026a4:	f000 f930 	bl	8002908 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020c 	bic.w	r2, r2, #12
 80026b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	e060      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d11c      	bne.n	800270c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026e2:	f000 f979 	bl	80029d8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6999      	ldr	r1, [r3, #24]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	e040      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11b      	bne.n	800274a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002722:	f000 f996 	bl	8002a52 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 020c 	bic.w	r2, r2, #12
 8002734:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
 8002748:	e021      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d11c      	bne.n	800278a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002760:	f000 f9b3 	bl	8002aca <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002772:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69d9      	ldr	r1, [r3, #28]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	021a      	lsls	r2, r3, #8
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	61da      	str	r2, [r3, #28]
 8002788:	e001      	b.n	800278e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3a      	ldr	r2, [pc, #232]	; (80028ec <TIM_Base_SetConfig+0xfc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00f      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a37      	ldr	r2, [pc, #220]	; (80028f0 <TIM_Base_SetConfig+0x100>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <TIM_Base_SetConfig+0x104>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <TIM_Base_SetConfig+0x108>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <TIM_Base_SetConfig+0xfc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d017      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <TIM_Base_SetConfig+0x100>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <TIM_Base_SetConfig+0x104>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00f      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <TIM_Base_SetConfig+0x108>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <TIM_Base_SetConfig+0x10c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <TIM_Base_SetConfig+0x110>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a23      	ldr	r2, [pc, #140]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <TIM_Base_SetConfig+0xfc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f023 0201 	bic.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
  }
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400
 8002904:	40014800 	.word	0x40014800

08002908 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 0201 	bic.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <TIM_TI1_SetConfig+0xbc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_TI1_SetConfig+0x56>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d00f      	beq.n	800295e <TIM_TI1_SetConfig+0x56>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <TIM_TI1_SetConfig+0xc0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_TI1_SetConfig+0x56>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <TIM_TI1_SetConfig+0xc4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_TI1_SetConfig+0x56>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <TIM_TI1_SetConfig+0xc8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_TI1_SetConfig+0x56>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <TIM_TI1_SetConfig+0xcc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <TIM_TI1_SetConfig+0x5a>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <TIM_TI1_SetConfig+0x5c>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e003      	b.n	8002982 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	b2db      	uxtb	r3, r3
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f023 030a 	bic.w	r3, r3, #10
 800299c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 030a 	and.w	r3, r3, #10
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40014000 	.word	0x40014000

080029d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 0210 	bic.w	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	031b      	lsls	r3, r3, #12
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	031b      	lsls	r3, r3, #12
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	621a      	str	r2, [r3, #32]
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2201      	movs	r2, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1a      	ldr	r2, [r3, #32]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	401a      	ands	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e042      	b.n	8002c4e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fb27 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f972 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b08a      	sub	sp, #40	; 0x28
 8002c5a:	af02      	add	r7, sp, #8
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d175      	bne.n	8002d62 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_UART_Transmit+0x2c>
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06e      	b.n	8002d64 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2221      	movs	r2, #33	; 0x21
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fcb2 	bl	80015fc <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d108      	bne.n	8002cc2 <HAL_UART_Transmit+0x6c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e003      	b.n	8002cca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cca:	e02e      	b.n	8002d2a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f848 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03a      	b.n	8002d64 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	3302      	adds	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e007      	b.n	8002d1c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1cb      	bne.n	8002ccc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f814 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e006      	b.n	8002d64 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	e03b      	b.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d037      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fc39 	bl	80015fc <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e03a      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d023      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d020      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d01d      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d116      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f81d 	bl	8002e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2208      	movs	r2, #8
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d0b4      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b095      	sub	sp, #84	; 0x54
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	330c      	adds	r3, #12
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e46:	643a      	str	r2, [r7, #64]	; 0x40
 8002e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e5      	bne.n	8002e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3314      	adds	r3, #20
 8002e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e5      	bne.n	8002e5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d119      	bne.n	8002eca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 0310 	bic.w	r3, r3, #16
 8002eac:	647b      	str	r3, [r7, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb6:	61ba      	str	r2, [r7, #24]
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6979      	ldr	r1, [r7, #20]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ed8:	bf00      	nop
 8002eda:	3754      	adds	r7, #84	; 0x54
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	; 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff f902 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7ff f8e9 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	; 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003028:	f7fd fdc6 	bl	8000bb8 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	; 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030be:	f7fd fd7b 	bl	8000bb8 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	; 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	; 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	; 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317a:	f7fd fd1d 	bl	8000bb8 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	; 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800323c:	f7fd fcbc 	bl	8000bb8 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032da:	f7fd fc6d 	bl	8000bb8 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	; 0x70
 800330e:	677a      	str	r2, [r7, #116]	; 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
 800336a:	667a      	str	r2, [r7, #100]	; 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338a:	f7fd fc15 	bl	8000bb8 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <__cvt>:
 80033cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	ec55 4b10 	vmov	r4, r5, d0
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	460e      	mov	r6, r1
 80033d8:	4619      	mov	r1, r3
 80033da:	462b      	mov	r3, r5
 80033dc:	bfbb      	ittet	lt
 80033de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80033e2:	461d      	movlt	r5, r3
 80033e4:	2300      	movge	r3, #0
 80033e6:	232d      	movlt	r3, #45	; 0x2d
 80033e8:	700b      	strb	r3, [r1, #0]
 80033ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80033f0:	4691      	mov	r9, r2
 80033f2:	f023 0820 	bic.w	r8, r3, #32
 80033f6:	bfbc      	itt	lt
 80033f8:	4622      	movlt	r2, r4
 80033fa:	4614      	movlt	r4, r2
 80033fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003400:	d005      	beq.n	800340e <__cvt+0x42>
 8003402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003406:	d100      	bne.n	800340a <__cvt+0x3e>
 8003408:	3601      	adds	r6, #1
 800340a:	2102      	movs	r1, #2
 800340c:	e000      	b.n	8003410 <__cvt+0x44>
 800340e:	2103      	movs	r1, #3
 8003410:	ab03      	add	r3, sp, #12
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	ab02      	add	r3, sp, #8
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	ec45 4b10 	vmov	d0, r4, r5
 800341c:	4653      	mov	r3, sl
 800341e:	4632      	mov	r2, r6
 8003420:	f000 fe6a 	bl	80040f8 <_dtoa_r>
 8003424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003428:	4607      	mov	r7, r0
 800342a:	d102      	bne.n	8003432 <__cvt+0x66>
 800342c:	f019 0f01 	tst.w	r9, #1
 8003430:	d022      	beq.n	8003478 <__cvt+0xac>
 8003432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003436:	eb07 0906 	add.w	r9, r7, r6
 800343a:	d110      	bne.n	800345e <__cvt+0x92>
 800343c:	783b      	ldrb	r3, [r7, #0]
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d10a      	bne.n	8003458 <__cvt+0x8c>
 8003442:	2200      	movs	r2, #0
 8003444:	2300      	movs	r3, #0
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fd fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800344e:	b918      	cbnz	r0, 8003458 <__cvt+0x8c>
 8003450:	f1c6 0601 	rsb	r6, r6, #1
 8003454:	f8ca 6000 	str.w	r6, [sl]
 8003458:	f8da 3000 	ldr.w	r3, [sl]
 800345c:	4499      	add	r9, r3
 800345e:	2200      	movs	r2, #0
 8003460:	2300      	movs	r3, #0
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	f7fd fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800346a:	b108      	cbz	r0, 8003470 <__cvt+0xa4>
 800346c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003470:	2230      	movs	r2, #48	; 0x30
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	454b      	cmp	r3, r9
 8003476:	d307      	bcc.n	8003488 <__cvt+0xbc>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347c:	1bdb      	subs	r3, r3, r7
 800347e:	4638      	mov	r0, r7
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	b004      	add	sp, #16
 8003484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003488:	1c59      	adds	r1, r3, #1
 800348a:	9103      	str	r1, [sp, #12]
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e7f0      	b.n	8003472 <__cvt+0xa6>

08003490 <__exponent>:
 8003490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003492:	4603      	mov	r3, r0
 8003494:	2900      	cmp	r1, #0
 8003496:	bfb8      	it	lt
 8003498:	4249      	neglt	r1, r1
 800349a:	f803 2b02 	strb.w	r2, [r3], #2
 800349e:	bfb4      	ite	lt
 80034a0:	222d      	movlt	r2, #45	; 0x2d
 80034a2:	222b      	movge	r2, #43	; 0x2b
 80034a4:	2909      	cmp	r1, #9
 80034a6:	7042      	strb	r2, [r0, #1]
 80034a8:	dd2a      	ble.n	8003500 <__exponent+0x70>
 80034aa:	f10d 0207 	add.w	r2, sp, #7
 80034ae:	4617      	mov	r7, r2
 80034b0:	260a      	movs	r6, #10
 80034b2:	4694      	mov	ip, r2
 80034b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80034b8:	fb06 1415 	mls	r4, r6, r5, r1
 80034bc:	3430      	adds	r4, #48	; 0x30
 80034be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80034c2:	460c      	mov	r4, r1
 80034c4:	2c63      	cmp	r4, #99	; 0x63
 80034c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80034ca:	4629      	mov	r1, r5
 80034cc:	dcf1      	bgt.n	80034b2 <__exponent+0x22>
 80034ce:	3130      	adds	r1, #48	; 0x30
 80034d0:	f1ac 0402 	sub.w	r4, ip, #2
 80034d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80034d8:	1c41      	adds	r1, r0, #1
 80034da:	4622      	mov	r2, r4
 80034dc:	42ba      	cmp	r2, r7
 80034de:	d30a      	bcc.n	80034f6 <__exponent+0x66>
 80034e0:	f10d 0209 	add.w	r2, sp, #9
 80034e4:	eba2 020c 	sub.w	r2, r2, ip
 80034e8:	42bc      	cmp	r4, r7
 80034ea:	bf88      	it	hi
 80034ec:	2200      	movhi	r2, #0
 80034ee:	4413      	add	r3, r2
 80034f0:	1a18      	subs	r0, r3, r0
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80034fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80034fe:	e7ed      	b.n	80034dc <__exponent+0x4c>
 8003500:	2330      	movs	r3, #48	; 0x30
 8003502:	3130      	adds	r1, #48	; 0x30
 8003504:	7083      	strb	r3, [r0, #2]
 8003506:	70c1      	strb	r1, [r0, #3]
 8003508:	1d03      	adds	r3, r0, #4
 800350a:	e7f1      	b.n	80034f0 <__exponent+0x60>

0800350c <_printf_float>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	ed2d 8b02 	vpush	{d8}
 8003514:	b08d      	sub	sp, #52	; 0x34
 8003516:	460c      	mov	r4, r1
 8003518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800351c:	4616      	mov	r6, r2
 800351e:	461f      	mov	r7, r3
 8003520:	4605      	mov	r5, r0
 8003522:	f000 fce7 	bl	8003ef4 <_localeconv_r>
 8003526:	f8d0 a000 	ldr.w	sl, [r0]
 800352a:	4650      	mov	r0, sl
 800352c:	f7fc fea8 	bl	8000280 <strlen>
 8003530:	2300      	movs	r3, #0
 8003532:	930a      	str	r3, [sp, #40]	; 0x28
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	f8d8 3000 	ldr.w	r3, [r8]
 800353c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003540:	3307      	adds	r3, #7
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	f8c8 2000 	str.w	r2, [r8]
 800354e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	f8cd 8018 	str.w	r8, [sp, #24]
 800355c:	ee08 0a10 	vmov	s16, r0
 8003560:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003568:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <_printf_float+0x2d8>)
 800356a:	f04f 32ff 	mov.w	r2, #4294967295
 800356e:	f7fd fae5 	bl	8000b3c <__aeabi_dcmpun>
 8003572:	bb88      	cbnz	r0, 80035d8 <_printf_float+0xcc>
 8003574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003578:	4b9a      	ldr	r3, [pc, #616]	; (80037e4 <_printf_float+0x2d8>)
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	f7fd fabf 	bl	8000b00 <__aeabi_dcmple>
 8003582:	bb48      	cbnz	r0, 80035d8 <_printf_float+0xcc>
 8003584:	2200      	movs	r2, #0
 8003586:	2300      	movs	r3, #0
 8003588:	4640      	mov	r0, r8
 800358a:	4649      	mov	r1, r9
 800358c:	f7fd faae 	bl	8000aec <__aeabi_dcmplt>
 8003590:	b110      	cbz	r0, 8003598 <_printf_float+0x8c>
 8003592:	232d      	movs	r3, #45	; 0x2d
 8003594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003598:	4a93      	ldr	r2, [pc, #588]	; (80037e8 <_printf_float+0x2dc>)
 800359a:	4b94      	ldr	r3, [pc, #592]	; (80037ec <_printf_float+0x2e0>)
 800359c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035a0:	bf94      	ite	ls
 80035a2:	4690      	movls	r8, r2
 80035a4:	4698      	movhi	r8, r3
 80035a6:	2303      	movs	r3, #3
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	9b05      	ldr	r3, [sp, #20]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	f04f 0900 	mov.w	r9, #0
 80035b6:	9700      	str	r7, [sp, #0]
 80035b8:	4633      	mov	r3, r6
 80035ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80035bc:	4621      	mov	r1, r4
 80035be:	4628      	mov	r0, r5
 80035c0:	f000 f9da 	bl	8003978 <_printf_common>
 80035c4:	3001      	adds	r0, #1
 80035c6:	f040 8090 	bne.w	80036ea <_printf_float+0x1de>
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295
 80035ce:	b00d      	add	sp, #52	; 0x34
 80035d0:	ecbd 8b02 	vpop	{d8}
 80035d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	4640      	mov	r0, r8
 80035de:	4649      	mov	r1, r9
 80035e0:	f7fd faac 	bl	8000b3c <__aeabi_dcmpun>
 80035e4:	b140      	cbz	r0, 80035f8 <_printf_float+0xec>
 80035e6:	464b      	mov	r3, r9
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfbc      	itt	lt
 80035ec:	232d      	movlt	r3, #45	; 0x2d
 80035ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035f2:	4a7f      	ldr	r2, [pc, #508]	; (80037f0 <_printf_float+0x2e4>)
 80035f4:	4b7f      	ldr	r3, [pc, #508]	; (80037f4 <_printf_float+0x2e8>)
 80035f6:	e7d1      	b.n	800359c <_printf_float+0x90>
 80035f8:	6863      	ldr	r3, [r4, #4]
 80035fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80035fe:	9206      	str	r2, [sp, #24]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	d13f      	bne.n	8003684 <_printf_float+0x178>
 8003604:	2306      	movs	r3, #6
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	9b05      	ldr	r3, [sp, #20]
 800360a:	6861      	ldr	r1, [r4, #4]
 800360c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003610:	2300      	movs	r3, #0
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	ab0a      	add	r3, sp, #40	; 0x28
 8003616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800361a:	ab09      	add	r3, sp, #36	; 0x24
 800361c:	ec49 8b10 	vmov	d0, r8, r9
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6022      	str	r2, [r4, #0]
 8003624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003628:	4628      	mov	r0, r5
 800362a:	f7ff fecf 	bl	80033cc <__cvt>
 800362e:	9b06      	ldr	r3, [sp, #24]
 8003630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003632:	2b47      	cmp	r3, #71	; 0x47
 8003634:	4680      	mov	r8, r0
 8003636:	d108      	bne.n	800364a <_printf_float+0x13e>
 8003638:	1cc8      	adds	r0, r1, #3
 800363a:	db02      	blt.n	8003642 <_printf_float+0x136>
 800363c:	6863      	ldr	r3, [r4, #4]
 800363e:	4299      	cmp	r1, r3
 8003640:	dd41      	ble.n	80036c6 <_printf_float+0x1ba>
 8003642:	f1ab 0302 	sub.w	r3, fp, #2
 8003646:	fa5f fb83 	uxtb.w	fp, r3
 800364a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800364e:	d820      	bhi.n	8003692 <_printf_float+0x186>
 8003650:	3901      	subs	r1, #1
 8003652:	465a      	mov	r2, fp
 8003654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003658:	9109      	str	r1, [sp, #36]	; 0x24
 800365a:	f7ff ff19 	bl	8003490 <__exponent>
 800365e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003660:	1813      	adds	r3, r2, r0
 8003662:	2a01      	cmp	r2, #1
 8003664:	4681      	mov	r9, r0
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	dc02      	bgt.n	8003670 <_printf_float+0x164>
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	07d2      	lsls	r2, r2, #31
 800366e:	d501      	bpl.n	8003674 <_printf_float+0x168>
 8003670:	3301      	adds	r3, #1
 8003672:	6123      	str	r3, [r4, #16]
 8003674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003678:	2b00      	cmp	r3, #0
 800367a:	d09c      	beq.n	80035b6 <_printf_float+0xaa>
 800367c:	232d      	movs	r3, #45	; 0x2d
 800367e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003682:	e798      	b.n	80035b6 <_printf_float+0xaa>
 8003684:	9a06      	ldr	r2, [sp, #24]
 8003686:	2a47      	cmp	r2, #71	; 0x47
 8003688:	d1be      	bne.n	8003608 <_printf_float+0xfc>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1bc      	bne.n	8003608 <_printf_float+0xfc>
 800368e:	2301      	movs	r3, #1
 8003690:	e7b9      	b.n	8003606 <_printf_float+0xfa>
 8003692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003696:	d118      	bne.n	80036ca <_printf_float+0x1be>
 8003698:	2900      	cmp	r1, #0
 800369a:	6863      	ldr	r3, [r4, #4]
 800369c:	dd0b      	ble.n	80036b6 <_printf_float+0x1aa>
 800369e:	6121      	str	r1, [r4, #16]
 80036a0:	b913      	cbnz	r3, 80036a8 <_printf_float+0x19c>
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	07d0      	lsls	r0, r2, #31
 80036a6:	d502      	bpl.n	80036ae <_printf_float+0x1a2>
 80036a8:	3301      	adds	r3, #1
 80036aa:	440b      	add	r3, r1
 80036ac:	6123      	str	r3, [r4, #16]
 80036ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80036b0:	f04f 0900 	mov.w	r9, #0
 80036b4:	e7de      	b.n	8003674 <_printf_float+0x168>
 80036b6:	b913      	cbnz	r3, 80036be <_printf_float+0x1b2>
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	07d2      	lsls	r2, r2, #31
 80036bc:	d501      	bpl.n	80036c2 <_printf_float+0x1b6>
 80036be:	3302      	adds	r3, #2
 80036c0:	e7f4      	b.n	80036ac <_printf_float+0x1a0>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e7f2      	b.n	80036ac <_printf_float+0x1a0>
 80036c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80036ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036cc:	4299      	cmp	r1, r3
 80036ce:	db05      	blt.n	80036dc <_printf_float+0x1d0>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	6121      	str	r1, [r4, #16]
 80036d4:	07d8      	lsls	r0, r3, #31
 80036d6:	d5ea      	bpl.n	80036ae <_printf_float+0x1a2>
 80036d8:	1c4b      	adds	r3, r1, #1
 80036da:	e7e7      	b.n	80036ac <_printf_float+0x1a0>
 80036dc:	2900      	cmp	r1, #0
 80036de:	bfd4      	ite	le
 80036e0:	f1c1 0202 	rsble	r2, r1, #2
 80036e4:	2201      	movgt	r2, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	e7e0      	b.n	80036ac <_printf_float+0x1a0>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	055a      	lsls	r2, r3, #21
 80036ee:	d407      	bmi.n	8003700 <_printf_float+0x1f4>
 80036f0:	6923      	ldr	r3, [r4, #16]
 80036f2:	4642      	mov	r2, r8
 80036f4:	4631      	mov	r1, r6
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b8      	blx	r7
 80036fa:	3001      	adds	r0, #1
 80036fc:	d12c      	bne.n	8003758 <_printf_float+0x24c>
 80036fe:	e764      	b.n	80035ca <_printf_float+0xbe>
 8003700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003704:	f240 80e0 	bls.w	80038c8 <_printf_float+0x3bc>
 8003708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800370c:	2200      	movs	r2, #0
 800370e:	2300      	movs	r3, #0
 8003710:	f7fd f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003714:	2800      	cmp	r0, #0
 8003716:	d034      	beq.n	8003782 <_printf_float+0x276>
 8003718:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <_printf_float+0x2ec>)
 800371a:	2301      	movs	r3, #1
 800371c:	4631      	mov	r1, r6
 800371e:	4628      	mov	r0, r5
 8003720:	47b8      	blx	r7
 8003722:	3001      	adds	r0, #1
 8003724:	f43f af51 	beq.w	80035ca <_printf_float+0xbe>
 8003728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800372c:	429a      	cmp	r2, r3
 800372e:	db02      	blt.n	8003736 <_printf_float+0x22a>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	07d8      	lsls	r0, r3, #31
 8003734:	d510      	bpl.n	8003758 <_printf_float+0x24c>
 8003736:	ee18 3a10 	vmov	r3, s16
 800373a:	4652      	mov	r2, sl
 800373c:	4631      	mov	r1, r6
 800373e:	4628      	mov	r0, r5
 8003740:	47b8      	blx	r7
 8003742:	3001      	adds	r0, #1
 8003744:	f43f af41 	beq.w	80035ca <_printf_float+0xbe>
 8003748:	f04f 0800 	mov.w	r8, #0
 800374c:	f104 091a 	add.w	r9, r4, #26
 8003750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003752:	3b01      	subs	r3, #1
 8003754:	4543      	cmp	r3, r8
 8003756:	dc09      	bgt.n	800376c <_printf_float+0x260>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	f100 8107 	bmi.w	800396e <_printf_float+0x462>
 8003760:	68e0      	ldr	r0, [r4, #12]
 8003762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003764:	4298      	cmp	r0, r3
 8003766:	bfb8      	it	lt
 8003768:	4618      	movlt	r0, r3
 800376a:	e730      	b.n	80035ce <_printf_float+0xc2>
 800376c:	2301      	movs	r3, #1
 800376e:	464a      	mov	r2, r9
 8003770:	4631      	mov	r1, r6
 8003772:	4628      	mov	r0, r5
 8003774:	47b8      	blx	r7
 8003776:	3001      	adds	r0, #1
 8003778:	f43f af27 	beq.w	80035ca <_printf_float+0xbe>
 800377c:	f108 0801 	add.w	r8, r8, #1
 8003780:	e7e6      	b.n	8003750 <_printf_float+0x244>
 8003782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	dc39      	bgt.n	80037fc <_printf_float+0x2f0>
 8003788:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <_printf_float+0x2ec>)
 800378a:	2301      	movs	r3, #1
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	f43f af19 	beq.w	80035ca <_printf_float+0xbe>
 8003798:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800379c:	4313      	orrs	r3, r2
 800379e:	d102      	bne.n	80037a6 <_printf_float+0x29a>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	07d9      	lsls	r1, r3, #31
 80037a4:	d5d8      	bpl.n	8003758 <_printf_float+0x24c>
 80037a6:	ee18 3a10 	vmov	r3, s16
 80037aa:	4652      	mov	r2, sl
 80037ac:	4631      	mov	r1, r6
 80037ae:	4628      	mov	r0, r5
 80037b0:	47b8      	blx	r7
 80037b2:	3001      	adds	r0, #1
 80037b4:	f43f af09 	beq.w	80035ca <_printf_float+0xbe>
 80037b8:	f04f 0900 	mov.w	r9, #0
 80037bc:	f104 0a1a 	add.w	sl, r4, #26
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	425b      	negs	r3, r3
 80037c4:	454b      	cmp	r3, r9
 80037c6:	dc01      	bgt.n	80037cc <_printf_float+0x2c0>
 80037c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ca:	e792      	b.n	80036f2 <_printf_float+0x1e6>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4652      	mov	r2, sl
 80037d0:	4631      	mov	r1, r6
 80037d2:	4628      	mov	r0, r5
 80037d4:	47b8      	blx	r7
 80037d6:	3001      	adds	r0, #1
 80037d8:	f43f aef7 	beq.w	80035ca <_printf_float+0xbe>
 80037dc:	f109 0901 	add.w	r9, r9, #1
 80037e0:	e7ee      	b.n	80037c0 <_printf_float+0x2b4>
 80037e2:	bf00      	nop
 80037e4:	7fefffff 	.word	0x7fefffff
 80037e8:	08006104 	.word	0x08006104
 80037ec:	08006108 	.word	0x08006108
 80037f0:	0800610c 	.word	0x0800610c
 80037f4:	08006110 	.word	0x08006110
 80037f8:	08006114 	.word	0x08006114
 80037fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003800:	429a      	cmp	r2, r3
 8003802:	bfa8      	it	ge
 8003804:	461a      	movge	r2, r3
 8003806:	2a00      	cmp	r2, #0
 8003808:	4691      	mov	r9, r2
 800380a:	dc37      	bgt.n	800387c <_printf_float+0x370>
 800380c:	f04f 0b00 	mov.w	fp, #0
 8003810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003814:	f104 021a 	add.w	r2, r4, #26
 8003818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800381a:	9305      	str	r3, [sp, #20]
 800381c:	eba3 0309 	sub.w	r3, r3, r9
 8003820:	455b      	cmp	r3, fp
 8003822:	dc33      	bgt.n	800388c <_printf_float+0x380>
 8003824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003828:	429a      	cmp	r2, r3
 800382a:	db3b      	blt.n	80038a4 <_printf_float+0x398>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	07da      	lsls	r2, r3, #31
 8003830:	d438      	bmi.n	80038a4 <_printf_float+0x398>
 8003832:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003836:	eba2 0903 	sub.w	r9, r2, r3
 800383a:	9b05      	ldr	r3, [sp, #20]
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	4591      	cmp	r9, r2
 8003840:	bfa8      	it	ge
 8003842:	4691      	movge	r9, r2
 8003844:	f1b9 0f00 	cmp.w	r9, #0
 8003848:	dc35      	bgt.n	80038b6 <_printf_float+0x3aa>
 800384a:	f04f 0800 	mov.w	r8, #0
 800384e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003852:	f104 0a1a 	add.w	sl, r4, #26
 8003856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	eba3 0309 	sub.w	r3, r3, r9
 8003860:	4543      	cmp	r3, r8
 8003862:	f77f af79 	ble.w	8003758 <_printf_float+0x24c>
 8003866:	2301      	movs	r3, #1
 8003868:	4652      	mov	r2, sl
 800386a:	4631      	mov	r1, r6
 800386c:	4628      	mov	r0, r5
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	f43f aeaa 	beq.w	80035ca <_printf_float+0xbe>
 8003876:	f108 0801 	add.w	r8, r8, #1
 800387a:	e7ec      	b.n	8003856 <_printf_float+0x34a>
 800387c:	4613      	mov	r3, r2
 800387e:	4631      	mov	r1, r6
 8003880:	4642      	mov	r2, r8
 8003882:	4628      	mov	r0, r5
 8003884:	47b8      	blx	r7
 8003886:	3001      	adds	r0, #1
 8003888:	d1c0      	bne.n	800380c <_printf_float+0x300>
 800388a:	e69e      	b.n	80035ca <_printf_float+0xbe>
 800388c:	2301      	movs	r3, #1
 800388e:	4631      	mov	r1, r6
 8003890:	4628      	mov	r0, r5
 8003892:	9205      	str	r2, [sp, #20]
 8003894:	47b8      	blx	r7
 8003896:	3001      	adds	r0, #1
 8003898:	f43f ae97 	beq.w	80035ca <_printf_float+0xbe>
 800389c:	9a05      	ldr	r2, [sp, #20]
 800389e:	f10b 0b01 	add.w	fp, fp, #1
 80038a2:	e7b9      	b.n	8003818 <_printf_float+0x30c>
 80038a4:	ee18 3a10 	vmov	r3, s16
 80038a8:	4652      	mov	r2, sl
 80038aa:	4631      	mov	r1, r6
 80038ac:	4628      	mov	r0, r5
 80038ae:	47b8      	blx	r7
 80038b0:	3001      	adds	r0, #1
 80038b2:	d1be      	bne.n	8003832 <_printf_float+0x326>
 80038b4:	e689      	b.n	80035ca <_printf_float+0xbe>
 80038b6:	9a05      	ldr	r2, [sp, #20]
 80038b8:	464b      	mov	r3, r9
 80038ba:	4442      	add	r2, r8
 80038bc:	4631      	mov	r1, r6
 80038be:	4628      	mov	r0, r5
 80038c0:	47b8      	blx	r7
 80038c2:	3001      	adds	r0, #1
 80038c4:	d1c1      	bne.n	800384a <_printf_float+0x33e>
 80038c6:	e680      	b.n	80035ca <_printf_float+0xbe>
 80038c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038ca:	2a01      	cmp	r2, #1
 80038cc:	dc01      	bgt.n	80038d2 <_printf_float+0x3c6>
 80038ce:	07db      	lsls	r3, r3, #31
 80038d0:	d53a      	bpl.n	8003948 <_printf_float+0x43c>
 80038d2:	2301      	movs	r3, #1
 80038d4:	4642      	mov	r2, r8
 80038d6:	4631      	mov	r1, r6
 80038d8:	4628      	mov	r0, r5
 80038da:	47b8      	blx	r7
 80038dc:	3001      	adds	r0, #1
 80038de:	f43f ae74 	beq.w	80035ca <_printf_float+0xbe>
 80038e2:	ee18 3a10 	vmov	r3, s16
 80038e6:	4652      	mov	r2, sl
 80038e8:	4631      	mov	r1, r6
 80038ea:	4628      	mov	r0, r5
 80038ec:	47b8      	blx	r7
 80038ee:	3001      	adds	r0, #1
 80038f0:	f43f ae6b 	beq.w	80035ca <_printf_float+0xbe>
 80038f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038f8:	2200      	movs	r2, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003900:	f7fd f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8003904:	b9d8      	cbnz	r0, 800393e <_printf_float+0x432>
 8003906:	f10a 33ff 	add.w	r3, sl, #4294967295
 800390a:	f108 0201 	add.w	r2, r8, #1
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47b8      	blx	r7
 8003914:	3001      	adds	r0, #1
 8003916:	d10e      	bne.n	8003936 <_printf_float+0x42a>
 8003918:	e657      	b.n	80035ca <_printf_float+0xbe>
 800391a:	2301      	movs	r3, #1
 800391c:	4652      	mov	r2, sl
 800391e:	4631      	mov	r1, r6
 8003920:	4628      	mov	r0, r5
 8003922:	47b8      	blx	r7
 8003924:	3001      	adds	r0, #1
 8003926:	f43f ae50 	beq.w	80035ca <_printf_float+0xbe>
 800392a:	f108 0801 	add.w	r8, r8, #1
 800392e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	4543      	cmp	r3, r8
 8003934:	dcf1      	bgt.n	800391a <_printf_float+0x40e>
 8003936:	464b      	mov	r3, r9
 8003938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800393c:	e6da      	b.n	80036f4 <_printf_float+0x1e8>
 800393e:	f04f 0800 	mov.w	r8, #0
 8003942:	f104 0a1a 	add.w	sl, r4, #26
 8003946:	e7f2      	b.n	800392e <_printf_float+0x422>
 8003948:	2301      	movs	r3, #1
 800394a:	4642      	mov	r2, r8
 800394c:	e7df      	b.n	800390e <_printf_float+0x402>
 800394e:	2301      	movs	r3, #1
 8003950:	464a      	mov	r2, r9
 8003952:	4631      	mov	r1, r6
 8003954:	4628      	mov	r0, r5
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f ae36 	beq.w	80035ca <_printf_float+0xbe>
 800395e:	f108 0801 	add.w	r8, r8, #1
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	4543      	cmp	r3, r8
 800396a:	dcf0      	bgt.n	800394e <_printf_float+0x442>
 800396c:	e6f8      	b.n	8003760 <_printf_float+0x254>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	f104 0919 	add.w	r9, r4, #25
 8003976:	e7f4      	b.n	8003962 <_printf_float+0x456>

08003978 <_printf_common>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	4699      	mov	r9, r3
 8003980:	688a      	ldr	r2, [r1, #8]
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003988:	4293      	cmp	r3, r2
 800398a:	bfb8      	it	lt
 800398c:	4613      	movlt	r3, r2
 800398e:	6033      	str	r3, [r6, #0]
 8003990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003994:	4607      	mov	r7, r0
 8003996:	460c      	mov	r4, r1
 8003998:	b10a      	cbz	r2, 800399e <_printf_common+0x26>
 800399a:	3301      	adds	r3, #1
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	0699      	lsls	r1, r3, #26
 80039a2:	bf42      	ittt	mi
 80039a4:	6833      	ldrmi	r3, [r6, #0]
 80039a6:	3302      	addmi	r3, #2
 80039a8:	6033      	strmi	r3, [r6, #0]
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	f015 0506 	ands.w	r5, r5, #6
 80039b0:	d106      	bne.n	80039c0 <_printf_common+0x48>
 80039b2:	f104 0a19 	add.w	sl, r4, #25
 80039b6:	68e3      	ldr	r3, [r4, #12]
 80039b8:	6832      	ldr	r2, [r6, #0]
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	42ab      	cmp	r3, r5
 80039be:	dc26      	bgt.n	8003a0e <_printf_common+0x96>
 80039c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c4:	1e13      	subs	r3, r2, #0
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	bf18      	it	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d42b      	bmi.n	8003a28 <_printf_common+0xb0>
 80039d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d4:	4649      	mov	r1, r9
 80039d6:	4638      	mov	r0, r7
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d01e      	beq.n	8003a1c <_printf_common+0xa4>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	6922      	ldr	r2, [r4, #16]
 80039e2:	f003 0306 	and.w	r3, r3, #6
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf02      	ittt	eq
 80039ea:	68e5      	ldreq	r5, [r4, #12]
 80039ec:	6833      	ldreq	r3, [r6, #0]
 80039ee:	1aed      	subeq	r5, r5, r3
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	bf0c      	ite	eq
 80039f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039f8:	2500      	movne	r5, #0
 80039fa:	4293      	cmp	r3, r2
 80039fc:	bfc4      	itt	gt
 80039fe:	1a9b      	subgt	r3, r3, r2
 8003a00:	18ed      	addgt	r5, r5, r3
 8003a02:	2600      	movs	r6, #0
 8003a04:	341a      	adds	r4, #26
 8003a06:	42b5      	cmp	r5, r6
 8003a08:	d11a      	bne.n	8003a40 <_printf_common+0xc8>
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	e008      	b.n	8003a20 <_printf_common+0xa8>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4652      	mov	r2, sl
 8003a12:	4649      	mov	r1, r9
 8003a14:	4638      	mov	r0, r7
 8003a16:	47c0      	blx	r8
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d103      	bne.n	8003a24 <_printf_common+0xac>
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7c6      	b.n	80039b6 <_printf_common+0x3e>
 8003a28:	18e1      	adds	r1, r4, r3
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	2030      	movs	r0, #48	; 0x30
 8003a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a32:	4422      	add	r2, r4
 8003a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	e7c7      	b.n	80039d0 <_printf_common+0x58>
 8003a40:	2301      	movs	r3, #1
 8003a42:	4622      	mov	r2, r4
 8003a44:	4649      	mov	r1, r9
 8003a46:	4638      	mov	r0, r7
 8003a48:	47c0      	blx	r8
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d0e6      	beq.n	8003a1c <_printf_common+0xa4>
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7d9      	b.n	8003a06 <_printf_common+0x8e>
	...

08003a54 <_printf_i>:
 8003a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	7e0f      	ldrb	r7, [r1, #24]
 8003a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a5c:	2f78      	cmp	r7, #120	; 0x78
 8003a5e:	4691      	mov	r9, r2
 8003a60:	4680      	mov	r8, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	469a      	mov	sl, r3
 8003a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6a:	d807      	bhi.n	8003a7c <_printf_i+0x28>
 8003a6c:	2f62      	cmp	r7, #98	; 0x62
 8003a6e:	d80a      	bhi.n	8003a86 <_printf_i+0x32>
 8003a70:	2f00      	cmp	r7, #0
 8003a72:	f000 80d4 	beq.w	8003c1e <_printf_i+0x1ca>
 8003a76:	2f58      	cmp	r7, #88	; 0x58
 8003a78:	f000 80c0 	beq.w	8003bfc <_printf_i+0x1a8>
 8003a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a84:	e03a      	b.n	8003afc <_printf_i+0xa8>
 8003a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8a:	2b15      	cmp	r3, #21
 8003a8c:	d8f6      	bhi.n	8003a7c <_printf_i+0x28>
 8003a8e:	a101      	add	r1, pc, #4	; (adr r1, 8003a94 <_printf_i+0x40>)
 8003a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003a7d 	.word	0x08003a7d
 8003aa0:	08003a7d 	.word	0x08003a7d
 8003aa4:	08003a7d 	.word	0x08003a7d
 8003aa8:	08003a7d 	.word	0x08003a7d
 8003aac:	08003b01 	.word	0x08003b01
 8003ab0:	08003a7d 	.word	0x08003a7d
 8003ab4:	08003a7d 	.word	0x08003a7d
 8003ab8:	08003a7d 	.word	0x08003a7d
 8003abc:	08003a7d 	.word	0x08003a7d
 8003ac0:	08003c05 	.word	0x08003c05
 8003ac4:	08003b2d 	.word	0x08003b2d
 8003ac8:	08003bbf 	.word	0x08003bbf
 8003acc:	08003a7d 	.word	0x08003a7d
 8003ad0:	08003a7d 	.word	0x08003a7d
 8003ad4:	08003c27 	.word	0x08003c27
 8003ad8:	08003a7d 	.word	0x08003a7d
 8003adc:	08003b2d 	.word	0x08003b2d
 8003ae0:	08003a7d 	.word	0x08003a7d
 8003ae4:	08003a7d 	.word	0x08003a7d
 8003ae8:	08003bc7 	.word	0x08003bc7
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	602a      	str	r2, [r5, #0]
 8003af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003afc:	2301      	movs	r3, #1
 8003afe:	e09f      	b.n	8003c40 <_printf_i+0x1ec>
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	0607      	lsls	r7, r0, #24
 8003b06:	f103 0104 	add.w	r1, r3, #4
 8003b0a:	6029      	str	r1, [r5, #0]
 8003b0c:	d501      	bpl.n	8003b12 <_printf_i+0xbe>
 8003b0e:	681e      	ldr	r6, [r3, #0]
 8003b10:	e003      	b.n	8003b1a <_printf_i+0xc6>
 8003b12:	0646      	lsls	r6, r0, #25
 8003b14:	d5fb      	bpl.n	8003b0e <_printf_i+0xba>
 8003b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	da03      	bge.n	8003b26 <_printf_i+0xd2>
 8003b1e:	232d      	movs	r3, #45	; 0x2d
 8003b20:	4276      	negs	r6, r6
 8003b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b26:	485a      	ldr	r0, [pc, #360]	; (8003c90 <_printf_i+0x23c>)
 8003b28:	230a      	movs	r3, #10
 8003b2a:	e012      	b.n	8003b52 <_printf_i+0xfe>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	1d19      	adds	r1, r3, #4
 8003b32:	6029      	str	r1, [r5, #0]
 8003b34:	0605      	lsls	r5, r0, #24
 8003b36:	d501      	bpl.n	8003b3c <_printf_i+0xe8>
 8003b38:	681e      	ldr	r6, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <_printf_i+0xee>
 8003b3c:	0641      	lsls	r1, r0, #25
 8003b3e:	d5fb      	bpl.n	8003b38 <_printf_i+0xe4>
 8003b40:	881e      	ldrh	r6, [r3, #0]
 8003b42:	4853      	ldr	r0, [pc, #332]	; (8003c90 <_printf_i+0x23c>)
 8003b44:	2f6f      	cmp	r7, #111	; 0x6f
 8003b46:	bf0c      	ite	eq
 8003b48:	2308      	moveq	r3, #8
 8003b4a:	230a      	movne	r3, #10
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b52:	6865      	ldr	r5, [r4, #4]
 8003b54:	60a5      	str	r5, [r4, #8]
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	bfa2      	ittt	ge
 8003b5a:	6821      	ldrge	r1, [r4, #0]
 8003b5c:	f021 0104 	bicge.w	r1, r1, #4
 8003b60:	6021      	strge	r1, [r4, #0]
 8003b62:	b90e      	cbnz	r6, 8003b68 <_printf_i+0x114>
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	d04b      	beq.n	8003c00 <_printf_i+0x1ac>
 8003b68:	4615      	mov	r5, r2
 8003b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b72:	5dc7      	ldrb	r7, [r0, r7]
 8003b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b78:	4637      	mov	r7, r6
 8003b7a:	42bb      	cmp	r3, r7
 8003b7c:	460e      	mov	r6, r1
 8003b7e:	d9f4      	bls.n	8003b6a <_printf_i+0x116>
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d10b      	bne.n	8003b9c <_printf_i+0x148>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	07de      	lsls	r6, r3, #31
 8003b88:	d508      	bpl.n	8003b9c <_printf_i+0x148>
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6861      	ldr	r1, [r4, #4]
 8003b8e:	4299      	cmp	r1, r3
 8003b90:	bfde      	ittt	le
 8003b92:	2330      	movle	r3, #48	; 0x30
 8003b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b9c:	1b52      	subs	r2, r2, r5
 8003b9e:	6122      	str	r2, [r4, #16]
 8003ba0:	f8cd a000 	str.w	sl, [sp]
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	aa03      	add	r2, sp, #12
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff fee4 	bl	8003978 <_printf_common>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d14a      	bne.n	8003c4a <_printf_i+0x1f6>
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	b004      	add	sp, #16
 8003bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f043 0320 	orr.w	r3, r3, #32
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	4833      	ldr	r0, [pc, #204]	; (8003c94 <_printf_i+0x240>)
 8003bc8:	2778      	movs	r7, #120	; 0x78
 8003bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6829      	ldr	r1, [r5, #0]
 8003bd2:	061f      	lsls	r7, r3, #24
 8003bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd8:	d402      	bmi.n	8003be0 <_printf_i+0x18c>
 8003bda:	065f      	lsls	r7, r3, #25
 8003bdc:	bf48      	it	mi
 8003bde:	b2b6      	uxthmi	r6, r6
 8003be0:	07df      	lsls	r7, r3, #31
 8003be2:	bf48      	it	mi
 8003be4:	f043 0320 	orrmi.w	r3, r3, #32
 8003be8:	6029      	str	r1, [r5, #0]
 8003bea:	bf48      	it	mi
 8003bec:	6023      	strmi	r3, [r4, #0]
 8003bee:	b91e      	cbnz	r6, 8003bf8 <_printf_i+0x1a4>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f023 0320 	bic.w	r3, r3, #32
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	e7a7      	b.n	8003b4c <_printf_i+0xf8>
 8003bfc:	4824      	ldr	r0, [pc, #144]	; (8003c90 <_printf_i+0x23c>)
 8003bfe:	e7e4      	b.n	8003bca <_printf_i+0x176>
 8003c00:	4615      	mov	r5, r2
 8003c02:	e7bd      	b.n	8003b80 <_printf_i+0x12c>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	6826      	ldr	r6, [r4, #0]
 8003c08:	6961      	ldr	r1, [r4, #20]
 8003c0a:	1d18      	adds	r0, r3, #4
 8003c0c:	6028      	str	r0, [r5, #0]
 8003c0e:	0635      	lsls	r5, r6, #24
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	d501      	bpl.n	8003c18 <_printf_i+0x1c4>
 8003c14:	6019      	str	r1, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <_printf_i+0x1ca>
 8003c18:	0670      	lsls	r0, r6, #25
 8003c1a:	d5fb      	bpl.n	8003c14 <_printf_i+0x1c0>
 8003c1c:	8019      	strh	r1, [r3, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6123      	str	r3, [r4, #16]
 8003c22:	4615      	mov	r5, r2
 8003c24:	e7bc      	b.n	8003ba0 <_printf_i+0x14c>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	1d1a      	adds	r2, r3, #4
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	681d      	ldr	r5, [r3, #0]
 8003c2e:	6862      	ldr	r2, [r4, #4]
 8003c30:	2100      	movs	r1, #0
 8003c32:	4628      	mov	r0, r5
 8003c34:	f7fc fad4 	bl	80001e0 <memchr>
 8003c38:	b108      	cbz	r0, 8003c3e <_printf_i+0x1ea>
 8003c3a:	1b40      	subs	r0, r0, r5
 8003c3c:	6060      	str	r0, [r4, #4]
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	2300      	movs	r3, #0
 8003c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c48:	e7aa      	b.n	8003ba0 <_printf_i+0x14c>
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4649      	mov	r1, r9
 8003c50:	4640      	mov	r0, r8
 8003c52:	47d0      	blx	sl
 8003c54:	3001      	adds	r0, #1
 8003c56:	d0ad      	beq.n	8003bb4 <_printf_i+0x160>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	079b      	lsls	r3, r3, #30
 8003c5c:	d413      	bmi.n	8003c86 <_printf_i+0x232>
 8003c5e:	68e0      	ldr	r0, [r4, #12]
 8003c60:	9b03      	ldr	r3, [sp, #12]
 8003c62:	4298      	cmp	r0, r3
 8003c64:	bfb8      	it	lt
 8003c66:	4618      	movlt	r0, r3
 8003c68:	e7a6      	b.n	8003bb8 <_printf_i+0x164>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4632      	mov	r2, r6
 8003c6e:	4649      	mov	r1, r9
 8003c70:	4640      	mov	r0, r8
 8003c72:	47d0      	blx	sl
 8003c74:	3001      	adds	r0, #1
 8003c76:	d09d      	beq.n	8003bb4 <_printf_i+0x160>
 8003c78:	3501      	adds	r5, #1
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	9903      	ldr	r1, [sp, #12]
 8003c7e:	1a5b      	subs	r3, r3, r1
 8003c80:	42ab      	cmp	r3, r5
 8003c82:	dcf2      	bgt.n	8003c6a <_printf_i+0x216>
 8003c84:	e7eb      	b.n	8003c5e <_printf_i+0x20a>
 8003c86:	2500      	movs	r5, #0
 8003c88:	f104 0619 	add.w	r6, r4, #25
 8003c8c:	e7f5      	b.n	8003c7a <_printf_i+0x226>
 8003c8e:	bf00      	nop
 8003c90:	08006116 	.word	0x08006116
 8003c94:	08006127 	.word	0x08006127

08003c98 <std>:
 8003c98:	2300      	movs	r3, #0
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ca6:	6083      	str	r3, [r0, #8]
 8003ca8:	8181      	strh	r1, [r0, #12]
 8003caa:	6643      	str	r3, [r0, #100]	; 0x64
 8003cac:	81c2      	strh	r2, [r0, #14]
 8003cae:	6183      	str	r3, [r0, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	305c      	adds	r0, #92	; 0x5c
 8003cb6:	f000 f914 	bl	8003ee2 <memset>
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <std+0x58>)
 8003cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <std+0x5c>)
 8003cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x60>)
 8003cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <std+0x64>)
 8003cc8:	6323      	str	r3, [r4, #48]	; 0x30
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <std+0x68>)
 8003ccc:	6224      	str	r4, [r4, #32]
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d006      	beq.n	8003ce0 <std+0x48>
 8003cd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cd6:	4294      	cmp	r4, r2
 8003cd8:	d002      	beq.n	8003ce0 <std+0x48>
 8003cda:	33d0      	adds	r3, #208	; 0xd0
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	d105      	bne.n	8003cec <std+0x54>
 8003ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce8:	f000 b978 	b.w	8003fdc <__retarget_lock_init_recursive>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	bf00      	nop
 8003cf0:	08003e5d 	.word	0x08003e5d
 8003cf4:	08003e7f 	.word	0x08003e7f
 8003cf8:	08003eb7 	.word	0x08003eb7
 8003cfc:	08003edb 	.word	0x08003edb
 8003d00:	200002e0 	.word	0x200002e0

08003d04 <stdio_exit_handler>:
 8003d04:	4a02      	ldr	r2, [pc, #8]	; (8003d10 <stdio_exit_handler+0xc>)
 8003d06:	4903      	ldr	r1, [pc, #12]	; (8003d14 <stdio_exit_handler+0x10>)
 8003d08:	4803      	ldr	r0, [pc, #12]	; (8003d18 <stdio_exit_handler+0x14>)
 8003d0a:	f000 b869 	b.w	8003de0 <_fwalk_sglue>
 8003d0e:	bf00      	nop
 8003d10:	20000010 	.word	0x20000010
 8003d14:	08005991 	.word	0x08005991
 8003d18:	2000001c 	.word	0x2000001c

08003d1c <cleanup_stdio>:
 8003d1c:	6841      	ldr	r1, [r0, #4]
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <cleanup_stdio+0x34>)
 8003d20:	4299      	cmp	r1, r3
 8003d22:	b510      	push	{r4, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	d001      	beq.n	8003d2c <cleanup_stdio+0x10>
 8003d28:	f001 fe32 	bl	8005990 <_fflush_r>
 8003d2c:	68a1      	ldr	r1, [r4, #8]
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <cleanup_stdio+0x38>)
 8003d30:	4299      	cmp	r1, r3
 8003d32:	d002      	beq.n	8003d3a <cleanup_stdio+0x1e>
 8003d34:	4620      	mov	r0, r4
 8003d36:	f001 fe2b 	bl	8005990 <_fflush_r>
 8003d3a:	68e1      	ldr	r1, [r4, #12]
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <cleanup_stdio+0x3c>)
 8003d3e:	4299      	cmp	r1, r3
 8003d40:	d004      	beq.n	8003d4c <cleanup_stdio+0x30>
 8003d42:	4620      	mov	r0, r4
 8003d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d48:	f001 be22 	b.w	8005990 <_fflush_r>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop
 8003d50:	200002e0 	.word	0x200002e0
 8003d54:	20000348 	.word	0x20000348
 8003d58:	200003b0 	.word	0x200003b0

08003d5c <global_stdio_init.part.0>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <global_stdio_init.part.0+0x30>)
 8003d60:	4c0b      	ldr	r4, [pc, #44]	; (8003d90 <global_stdio_init.part.0+0x34>)
 8003d62:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <global_stdio_init.part.0+0x38>)
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	4620      	mov	r0, r4
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	f7ff ff94 	bl	8003c98 <std>
 8003d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d74:	2201      	movs	r2, #1
 8003d76:	2109      	movs	r1, #9
 8003d78:	f7ff ff8e 	bl	8003c98 <std>
 8003d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d80:	2202      	movs	r2, #2
 8003d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d86:	2112      	movs	r1, #18
 8003d88:	f7ff bf86 	b.w	8003c98 <std>
 8003d8c:	20000418 	.word	0x20000418
 8003d90:	200002e0 	.word	0x200002e0
 8003d94:	08003d05 	.word	0x08003d05

08003d98 <__sfp_lock_acquire>:
 8003d98:	4801      	ldr	r0, [pc, #4]	; (8003da0 <__sfp_lock_acquire+0x8>)
 8003d9a:	f000 b920 	b.w	8003fde <__retarget_lock_acquire_recursive>
 8003d9e:	bf00      	nop
 8003da0:	20000421 	.word	0x20000421

08003da4 <__sfp_lock_release>:
 8003da4:	4801      	ldr	r0, [pc, #4]	; (8003dac <__sfp_lock_release+0x8>)
 8003da6:	f000 b91b 	b.w	8003fe0 <__retarget_lock_release_recursive>
 8003daa:	bf00      	nop
 8003dac:	20000421 	.word	0x20000421

08003db0 <__sinit>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	f7ff fff0 	bl	8003d98 <__sfp_lock_acquire>
 8003db8:	6a23      	ldr	r3, [r4, #32]
 8003dba:	b11b      	cbz	r3, 8003dc4 <__sinit+0x14>
 8003dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc0:	f7ff bff0 	b.w	8003da4 <__sfp_lock_release>
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__sinit+0x28>)
 8003dc6:	6223      	str	r3, [r4, #32]
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__sinit+0x2c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f5      	bne.n	8003dbc <__sinit+0xc>
 8003dd0:	f7ff ffc4 	bl	8003d5c <global_stdio_init.part.0>
 8003dd4:	e7f2      	b.n	8003dbc <__sinit+0xc>
 8003dd6:	bf00      	nop
 8003dd8:	08003d1d 	.word	0x08003d1d
 8003ddc:	20000418 	.word	0x20000418

08003de0 <_fwalk_sglue>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4607      	mov	r7, r0
 8003de6:	4688      	mov	r8, r1
 8003de8:	4614      	mov	r4, r2
 8003dea:	2600      	movs	r6, #0
 8003dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df0:	f1b9 0901 	subs.w	r9, r9, #1
 8003df4:	d505      	bpl.n	8003e02 <_fwalk_sglue+0x22>
 8003df6:	6824      	ldr	r4, [r4, #0]
 8003df8:	2c00      	cmp	r4, #0
 8003dfa:	d1f7      	bne.n	8003dec <_fwalk_sglue+0xc>
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d907      	bls.n	8003e18 <_fwalk_sglue+0x38>
 8003e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d003      	beq.n	8003e18 <_fwalk_sglue+0x38>
 8003e10:	4629      	mov	r1, r5
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c0      	blx	r8
 8003e16:	4306      	orrs	r6, r0
 8003e18:	3568      	adds	r5, #104	; 0x68
 8003e1a:	e7e9      	b.n	8003df0 <_fwalk_sglue+0x10>

08003e1c <siprintf>:
 8003e1c:	b40e      	push	{r1, r2, r3}
 8003e1e:	b500      	push	{lr}
 8003e20:	b09c      	sub	sp, #112	; 0x70
 8003e22:	ab1d      	add	r3, sp, #116	; 0x74
 8003e24:	9002      	str	r0, [sp, #8]
 8003e26:	9006      	str	r0, [sp, #24]
 8003e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e2c:	4809      	ldr	r0, [pc, #36]	; (8003e54 <siprintf+0x38>)
 8003e2e:	9107      	str	r1, [sp, #28]
 8003e30:	9104      	str	r1, [sp, #16]
 8003e32:	4909      	ldr	r1, [pc, #36]	; (8003e58 <siprintf+0x3c>)
 8003e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e38:	9105      	str	r1, [sp, #20]
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	a902      	add	r1, sp, #8
 8003e40:	f001 fc22 	bl	8005688 <_svfiprintf_r>
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	b01c      	add	sp, #112	; 0x70
 8003e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e50:	b003      	add	sp, #12
 8003e52:	4770      	bx	lr
 8003e54:	20000068 	.word	0x20000068
 8003e58:	ffff0208 	.word	0xffff0208

08003e5c <__sread>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	460c      	mov	r4, r1
 8003e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e64:	f000 f86c 	bl	8003f40 <_read_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	bfab      	itete	ge
 8003e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e70:	181b      	addge	r3, r3, r0
 8003e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e76:	bfac      	ite	ge
 8003e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e7a:	81a3      	strhlt	r3, [r4, #12]
 8003e7c:	bd10      	pop	{r4, pc}

08003e7e <__swrite>:
 8003e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	461f      	mov	r7, r3
 8003e84:	898b      	ldrh	r3, [r1, #12]
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	4605      	mov	r5, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	d505      	bpl.n	8003e9c <__swrite+0x1e>
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	2302      	movs	r3, #2
 8003e96:	2200      	movs	r2, #0
 8003e98:	f000 f840 	bl	8003f1c <_lseek_r>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	463b      	mov	r3, r7
 8003eac:	4628      	mov	r0, r5
 8003eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	f000 b857 	b.w	8003f64 <_write_r>

08003eb6 <__sseek>:
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	460c      	mov	r4, r1
 8003eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebe:	f000 f82d 	bl	8003f1c <_lseek_r>
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	bf15      	itete	ne
 8003ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ed2:	81a3      	strheq	r3, [r4, #12]
 8003ed4:	bf18      	it	ne
 8003ed6:	81a3      	strhne	r3, [r4, #12]
 8003ed8:	bd10      	pop	{r4, pc}

08003eda <__sclose>:
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	f000 b80d 	b.w	8003efc <_close_r>

08003ee2 <memset>:
 8003ee2:	4402      	add	r2, r0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d100      	bne.n	8003eec <memset+0xa>
 8003eea:	4770      	bx	lr
 8003eec:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef0:	e7f9      	b.n	8003ee6 <memset+0x4>
	...

08003ef4 <_localeconv_r>:
 8003ef4:	4800      	ldr	r0, [pc, #0]	; (8003ef8 <_localeconv_r+0x4>)
 8003ef6:	4770      	bx	lr
 8003ef8:	2000015c 	.word	0x2000015c

08003efc <_close_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d06      	ldr	r5, [pc, #24]	; (8003f18 <_close_r+0x1c>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fd fa6b 	bl	80013e2 <_close>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_close_r+0x1a>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_close_r+0x1a>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	2000041c 	.word	0x2000041c

08003f1c <_lseek_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	; (8003f3c <_lseek_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7fd fa80 	bl	8001430 <_lseek>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_lseek_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_lseek_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	2000041c 	.word	0x2000041c

08003f40 <_read_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	; (8003f60 <_read_r+0x20>)
 8003f44:	4604      	mov	r4, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fd fa0e 	bl	8001370 <_read>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_read_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_read_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	2000041c 	.word	0x2000041c

08003f64 <_write_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	; (8003f84 <_write_r+0x20>)
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fd fa19 	bl	80013aa <_write>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_write_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_write_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	2000041c 	.word	0x2000041c

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000068 	.word	0x20000068

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4d0d      	ldr	r5, [pc, #52]	; (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4d0b      	ldr	r5, [pc, #44]	; (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	; (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f002 f896 	bl	80060d8 <_init>
 8003fac:	1b64      	subs	r4, r4, r5
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	0800647c 	.word	0x0800647c
 8003fd0:	0800647c 	.word	0x0800647c
 8003fd4:	0800647c 	.word	0x0800647c
 8003fd8:	08006480 	.word	0x08006480

08003fdc <__retarget_lock_init_recursive>:
 8003fdc:	4770      	bx	lr

08003fde <__retarget_lock_acquire_recursive>:
 8003fde:	4770      	bx	lr

08003fe0 <__retarget_lock_release_recursive>:
 8003fe0:	4770      	bx	lr

08003fe2 <quorem>:
 8003fe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe6:	6903      	ldr	r3, [r0, #16]
 8003fe8:	690c      	ldr	r4, [r1, #16]
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	4607      	mov	r7, r0
 8003fee:	db7e      	blt.n	80040ee <quorem+0x10c>
 8003ff0:	3c01      	subs	r4, #1
 8003ff2:	f101 0814 	add.w	r8, r1, #20
 8003ff6:	f100 0514 	add.w	r5, r0, #20
 8003ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004008:	3301      	adds	r3, #1
 800400a:	429a      	cmp	r2, r3
 800400c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004014:	fbb2 f6f3 	udiv	r6, r2, r3
 8004018:	d331      	bcc.n	800407e <quorem+0x9c>
 800401a:	f04f 0e00 	mov.w	lr, #0
 800401e:	4640      	mov	r0, r8
 8004020:	46ac      	mov	ip, r5
 8004022:	46f2      	mov	sl, lr
 8004024:	f850 2b04 	ldr.w	r2, [r0], #4
 8004028:	b293      	uxth	r3, r2
 800402a:	fb06 e303 	mla	r3, r6, r3, lr
 800402e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004032:	0c1a      	lsrs	r2, r3, #16
 8004034:	b29b      	uxth	r3, r3
 8004036:	ebaa 0303 	sub.w	r3, sl, r3
 800403a:	f8dc a000 	ldr.w	sl, [ip]
 800403e:	fa13 f38a 	uxtah	r3, r3, sl
 8004042:	fb06 220e 	mla	r2, r6, lr, r2
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	9b00      	ldr	r3, [sp, #0]
 800404a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800404e:	b292      	uxth	r2, r2
 8004050:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004058:	f8bd 3000 	ldrh.w	r3, [sp]
 800405c:	4581      	cmp	r9, r0
 800405e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004062:	f84c 3b04 	str.w	r3, [ip], #4
 8004066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800406a:	d2db      	bcs.n	8004024 <quorem+0x42>
 800406c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004070:	b92b      	cbnz	r3, 800407e <quorem+0x9c>
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	3b04      	subs	r3, #4
 8004076:	429d      	cmp	r5, r3
 8004078:	461a      	mov	r2, r3
 800407a:	d32c      	bcc.n	80040d6 <quorem+0xf4>
 800407c:	613c      	str	r4, [r7, #16]
 800407e:	4638      	mov	r0, r7
 8004080:	f001 f9a8 	bl	80053d4 <__mcmp>
 8004084:	2800      	cmp	r0, #0
 8004086:	db22      	blt.n	80040ce <quorem+0xec>
 8004088:	3601      	adds	r6, #1
 800408a:	4629      	mov	r1, r5
 800408c:	2000      	movs	r0, #0
 800408e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004092:	f8d1 c000 	ldr.w	ip, [r1]
 8004096:	b293      	uxth	r3, r2
 8004098:	1ac3      	subs	r3, r0, r3
 800409a:	0c12      	lsrs	r2, r2, #16
 800409c:	fa13 f38c 	uxtah	r3, r3, ip
 80040a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80040a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ae:	45c1      	cmp	r9, r8
 80040b0:	f841 3b04 	str.w	r3, [r1], #4
 80040b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80040b8:	d2e9      	bcs.n	800408e <quorem+0xac>
 80040ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040c2:	b922      	cbnz	r2, 80040ce <quorem+0xec>
 80040c4:	3b04      	subs	r3, #4
 80040c6:	429d      	cmp	r5, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	d30a      	bcc.n	80040e2 <quorem+0x100>
 80040cc:	613c      	str	r4, [r7, #16]
 80040ce:	4630      	mov	r0, r6
 80040d0:	b003      	add	sp, #12
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	3b04      	subs	r3, #4
 80040da:	2a00      	cmp	r2, #0
 80040dc:	d1ce      	bne.n	800407c <quorem+0x9a>
 80040de:	3c01      	subs	r4, #1
 80040e0:	e7c9      	b.n	8004076 <quorem+0x94>
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	3b04      	subs	r3, #4
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	d1f0      	bne.n	80040cc <quorem+0xea>
 80040ea:	3c01      	subs	r4, #1
 80040ec:	e7eb      	b.n	80040c6 <quorem+0xe4>
 80040ee:	2000      	movs	r0, #0
 80040f0:	e7ee      	b.n	80040d0 <quorem+0xee>
 80040f2:	0000      	movs	r0, r0
 80040f4:	0000      	movs	r0, r0
	...

080040f8 <_dtoa_r>:
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	ed2d 8b04 	vpush	{d8-d9}
 8004100:	69c5      	ldr	r5, [r0, #28]
 8004102:	b093      	sub	sp, #76	; 0x4c
 8004104:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004108:	ec57 6b10 	vmov	r6, r7, d0
 800410c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004110:	9107      	str	r1, [sp, #28]
 8004112:	4604      	mov	r4, r0
 8004114:	920a      	str	r2, [sp, #40]	; 0x28
 8004116:	930d      	str	r3, [sp, #52]	; 0x34
 8004118:	b975      	cbnz	r5, 8004138 <_dtoa_r+0x40>
 800411a:	2010      	movs	r0, #16
 800411c:	f000 fe2a 	bl	8004d74 <malloc>
 8004120:	4602      	mov	r2, r0
 8004122:	61e0      	str	r0, [r4, #28]
 8004124:	b920      	cbnz	r0, 8004130 <_dtoa_r+0x38>
 8004126:	4bae      	ldr	r3, [pc, #696]	; (80043e0 <_dtoa_r+0x2e8>)
 8004128:	21ef      	movs	r1, #239	; 0xef
 800412a:	48ae      	ldr	r0, [pc, #696]	; (80043e4 <_dtoa_r+0x2ec>)
 800412c:	f001 fc90 	bl	8005a50 <__assert_func>
 8004130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004134:	6005      	str	r5, [r0, #0]
 8004136:	60c5      	str	r5, [r0, #12]
 8004138:	69e3      	ldr	r3, [r4, #28]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	b151      	cbz	r1, 8004154 <_dtoa_r+0x5c>
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	604a      	str	r2, [r1, #4]
 8004142:	2301      	movs	r3, #1
 8004144:	4093      	lsls	r3, r2
 8004146:	608b      	str	r3, [r1, #8]
 8004148:	4620      	mov	r0, r4
 800414a:	f000 ff07 	bl	8004f5c <_Bfree>
 800414e:	69e3      	ldr	r3, [r4, #28]
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	1e3b      	subs	r3, r7, #0
 8004156:	bfbb      	ittet	lt
 8004158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800415c:	9303      	strlt	r3, [sp, #12]
 800415e:	2300      	movge	r3, #0
 8004160:	2201      	movlt	r2, #1
 8004162:	bfac      	ite	ge
 8004164:	f8c8 3000 	strge.w	r3, [r8]
 8004168:	f8c8 2000 	strlt.w	r2, [r8]
 800416c:	4b9e      	ldr	r3, [pc, #632]	; (80043e8 <_dtoa_r+0x2f0>)
 800416e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004172:	ea33 0308 	bics.w	r3, r3, r8
 8004176:	d11b      	bne.n	80041b0 <_dtoa_r+0xb8>
 8004178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800417a:	f242 730f 	movw	r3, #9999	; 0x270f
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004184:	4333      	orrs	r3, r6
 8004186:	f000 8593 	beq.w	8004cb0 <_dtoa_r+0xbb8>
 800418a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800418c:	b963      	cbnz	r3, 80041a8 <_dtoa_r+0xb0>
 800418e:	4b97      	ldr	r3, [pc, #604]	; (80043ec <_dtoa_r+0x2f4>)
 8004190:	e027      	b.n	80041e2 <_dtoa_r+0xea>
 8004192:	4b97      	ldr	r3, [pc, #604]	; (80043f0 <_dtoa_r+0x2f8>)
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	9800      	ldr	r0, [sp, #0]
 800419e:	b013      	add	sp, #76	; 0x4c
 80041a0:	ecbd 8b04 	vpop	{d8-d9}
 80041a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a8:	4b90      	ldr	r3, [pc, #576]	; (80043ec <_dtoa_r+0x2f4>)
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	3303      	adds	r3, #3
 80041ae:	e7f3      	b.n	8004198 <_dtoa_r+0xa0>
 80041b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	ec51 0b17 	vmov	r0, r1, d7
 80041ba:	eeb0 8a47 	vmov.f32	s16, s14
 80041be:	eef0 8a67 	vmov.f32	s17, s15
 80041c2:	2300      	movs	r3, #0
 80041c4:	f7fc fc88 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c8:	4681      	mov	r9, r0
 80041ca:	b160      	cbz	r0, 80041e6 <_dtoa_r+0xee>
 80041cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041ce:	2301      	movs	r3, #1
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8568 	beq.w	8004caa <_dtoa_r+0xbb2>
 80041da:	4b86      	ldr	r3, [pc, #536]	; (80043f4 <_dtoa_r+0x2fc>)
 80041dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	e7da      	b.n	800419c <_dtoa_r+0xa4>
 80041e6:	aa10      	add	r2, sp, #64	; 0x40
 80041e8:	a911      	add	r1, sp, #68	; 0x44
 80041ea:	4620      	mov	r0, r4
 80041ec:	eeb0 0a48 	vmov.f32	s0, s16
 80041f0:	eef0 0a68 	vmov.f32	s1, s17
 80041f4:	f001 f994 	bl	8005520 <__d2b>
 80041f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041fc:	4682      	mov	sl, r0
 80041fe:	2d00      	cmp	r5, #0
 8004200:	d07f      	beq.n	8004302 <_dtoa_r+0x20a>
 8004202:	ee18 3a90 	vmov	r3, s17
 8004206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800420e:	ec51 0b18 	vmov	r0, r1, d8
 8004212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800421a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800421e:	4619      	mov	r1, r3
 8004220:	2200      	movs	r2, #0
 8004222:	4b75      	ldr	r3, [pc, #468]	; (80043f8 <_dtoa_r+0x300>)
 8004224:	f7fc f838 	bl	8000298 <__aeabi_dsub>
 8004228:	a367      	add	r3, pc, #412	; (adr r3, 80043c8 <_dtoa_r+0x2d0>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc f9eb 	bl	8000608 <__aeabi_dmul>
 8004232:	a367      	add	r3, pc, #412	; (adr r3, 80043d0 <_dtoa_r+0x2d8>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc f830 	bl	800029c <__adddf3>
 800423c:	4606      	mov	r6, r0
 800423e:	4628      	mov	r0, r5
 8004240:	460f      	mov	r7, r1
 8004242:	f7fc f977 	bl	8000534 <__aeabi_i2d>
 8004246:	a364      	add	r3, pc, #400	; (adr r3, 80043d8 <_dtoa_r+0x2e0>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f9dc 	bl	8000608 <__aeabi_dmul>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4630      	mov	r0, r6
 8004256:	4639      	mov	r1, r7
 8004258:	f7fc f820 	bl	800029c <__adddf3>
 800425c:	4606      	mov	r6, r0
 800425e:	460f      	mov	r7, r1
 8004260:	f7fc fc82 	bl	8000b68 <__aeabi_d2iz>
 8004264:	2200      	movs	r2, #0
 8004266:	4683      	mov	fp, r0
 8004268:	2300      	movs	r3, #0
 800426a:	4630      	mov	r0, r6
 800426c:	4639      	mov	r1, r7
 800426e:	f7fc fc3d 	bl	8000aec <__aeabi_dcmplt>
 8004272:	b148      	cbz	r0, 8004288 <_dtoa_r+0x190>
 8004274:	4658      	mov	r0, fp
 8004276:	f7fc f95d 	bl	8000534 <__aeabi_i2d>
 800427a:	4632      	mov	r2, r6
 800427c:	463b      	mov	r3, r7
 800427e:	f7fc fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004282:	b908      	cbnz	r0, 8004288 <_dtoa_r+0x190>
 8004284:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004288:	f1bb 0f16 	cmp.w	fp, #22
 800428c:	d857      	bhi.n	800433e <_dtoa_r+0x246>
 800428e:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <_dtoa_r+0x304>)
 8004290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	ec51 0b18 	vmov	r0, r1, d8
 800429c:	f7fc fc26 	bl	8000aec <__aeabi_dcmplt>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d04e      	beq.n	8004342 <_dtoa_r+0x24a>
 80042a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80042a8:	2300      	movs	r3, #0
 80042aa:	930c      	str	r3, [sp, #48]	; 0x30
 80042ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042ae:	1b5b      	subs	r3, r3, r5
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	bf45      	ittet	mi
 80042b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80042b8:	9305      	strmi	r3, [sp, #20]
 80042ba:	2300      	movpl	r3, #0
 80042bc:	2300      	movmi	r3, #0
 80042be:	9206      	str	r2, [sp, #24]
 80042c0:	bf54      	ite	pl
 80042c2:	9305      	strpl	r3, [sp, #20]
 80042c4:	9306      	strmi	r3, [sp, #24]
 80042c6:	f1bb 0f00 	cmp.w	fp, #0
 80042ca:	db3c      	blt.n	8004346 <_dtoa_r+0x24e>
 80042cc:	9b06      	ldr	r3, [sp, #24]
 80042ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80042d2:	445b      	add	r3, fp
 80042d4:	9306      	str	r3, [sp, #24]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9308      	str	r3, [sp, #32]
 80042da:	9b07      	ldr	r3, [sp, #28]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d868      	bhi.n	80043b2 <_dtoa_r+0x2ba>
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	bfc4      	itt	gt
 80042e4:	3b04      	subgt	r3, #4
 80042e6:	9307      	strgt	r3, [sp, #28]
 80042e8:	9b07      	ldr	r3, [sp, #28]
 80042ea:	f1a3 0302 	sub.w	r3, r3, #2
 80042ee:	bfcc      	ite	gt
 80042f0:	2500      	movgt	r5, #0
 80042f2:	2501      	movle	r5, #1
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	f200 8085 	bhi.w	8004404 <_dtoa_r+0x30c>
 80042fa:	e8df f003 	tbb	[pc, r3]
 80042fe:	3b2e      	.short	0x3b2e
 8004300:	5839      	.short	0x5839
 8004302:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004306:	441d      	add	r5, r3
 8004308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800430c:	2b20      	cmp	r3, #32
 800430e:	bfc1      	itttt	gt
 8004310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004314:	fa08 f803 	lslgt.w	r8, r8, r3
 8004318:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800431c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004320:	bfd6      	itet	le
 8004322:	f1c3 0320 	rsble	r3, r3, #32
 8004326:	ea48 0003 	orrgt.w	r0, r8, r3
 800432a:	fa06 f003 	lslle.w	r0, r6, r3
 800432e:	f7fc f8f1 	bl	8000514 <__aeabi_ui2d>
 8004332:	2201      	movs	r2, #1
 8004334:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004338:	3d01      	subs	r5, #1
 800433a:	920e      	str	r2, [sp, #56]	; 0x38
 800433c:	e76f      	b.n	800421e <_dtoa_r+0x126>
 800433e:	2301      	movs	r3, #1
 8004340:	e7b3      	b.n	80042aa <_dtoa_r+0x1b2>
 8004342:	900c      	str	r0, [sp, #48]	; 0x30
 8004344:	e7b2      	b.n	80042ac <_dtoa_r+0x1b4>
 8004346:	9b05      	ldr	r3, [sp, #20]
 8004348:	eba3 030b 	sub.w	r3, r3, fp
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	f1cb 0300 	rsb	r3, fp, #0
 8004352:	9308      	str	r3, [sp, #32]
 8004354:	2300      	movs	r3, #0
 8004356:	930b      	str	r3, [sp, #44]	; 0x2c
 8004358:	e7bf      	b.n	80042da <_dtoa_r+0x1e2>
 800435a:	2300      	movs	r3, #0
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	dc52      	bgt.n	800440a <_dtoa_r+0x312>
 8004364:	2301      	movs	r3, #1
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	461a      	mov	r2, r3
 800436c:	920a      	str	r2, [sp, #40]	; 0x28
 800436e:	e00b      	b.n	8004388 <_dtoa_r+0x290>
 8004370:	2301      	movs	r3, #1
 8004372:	e7f3      	b.n	800435c <_dtoa_r+0x264>
 8004374:	2300      	movs	r3, #0
 8004376:	9309      	str	r3, [sp, #36]	; 0x24
 8004378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800437a:	445b      	add	r3, fp
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	3301      	adds	r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	bfb8      	it	lt
 8004386:	2301      	movlt	r3, #1
 8004388:	69e0      	ldr	r0, [r4, #28]
 800438a:	2100      	movs	r1, #0
 800438c:	2204      	movs	r2, #4
 800438e:	f102 0614 	add.w	r6, r2, #20
 8004392:	429e      	cmp	r6, r3
 8004394:	d93d      	bls.n	8004412 <_dtoa_r+0x31a>
 8004396:	6041      	str	r1, [r0, #4]
 8004398:	4620      	mov	r0, r4
 800439a:	f000 fd9f 	bl	8004edc <_Balloc>
 800439e:	9000      	str	r0, [sp, #0]
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d139      	bne.n	8004418 <_dtoa_r+0x320>
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <_dtoa_r+0x308>)
 80043a6:	4602      	mov	r2, r0
 80043a8:	f240 11af 	movw	r1, #431	; 0x1af
 80043ac:	e6bd      	b.n	800412a <_dtoa_r+0x32>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e7e1      	b.n	8004376 <_dtoa_r+0x27e>
 80043b2:	2501      	movs	r5, #1
 80043b4:	2300      	movs	r3, #0
 80043b6:	9307      	str	r3, [sp, #28]
 80043b8:	9509      	str	r5, [sp, #36]	; 0x24
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	2200      	movs	r2, #0
 80043c4:	2312      	movs	r3, #18
 80043c6:	e7d1      	b.n	800436c <_dtoa_r+0x274>
 80043c8:	636f4361 	.word	0x636f4361
 80043cc:	3fd287a7 	.word	0x3fd287a7
 80043d0:	8b60c8b3 	.word	0x8b60c8b3
 80043d4:	3fc68a28 	.word	0x3fc68a28
 80043d8:	509f79fb 	.word	0x509f79fb
 80043dc:	3fd34413 	.word	0x3fd34413
 80043e0:	08006145 	.word	0x08006145
 80043e4:	0800615c 	.word	0x0800615c
 80043e8:	7ff00000 	.word	0x7ff00000
 80043ec:	08006141 	.word	0x08006141
 80043f0:	08006138 	.word	0x08006138
 80043f4:	08006115 	.word	0x08006115
 80043f8:	3ff80000 	.word	0x3ff80000
 80043fc:	08006248 	.word	0x08006248
 8004400:	080061b4 	.word	0x080061b4
 8004404:	2301      	movs	r3, #1
 8004406:	9309      	str	r3, [sp, #36]	; 0x24
 8004408:	e7d7      	b.n	80043ba <_dtoa_r+0x2c2>
 800440a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	e7ba      	b.n	8004388 <_dtoa_r+0x290>
 8004412:	3101      	adds	r1, #1
 8004414:	0052      	lsls	r2, r2, #1
 8004416:	e7ba      	b.n	800438e <_dtoa_r+0x296>
 8004418:	69e3      	ldr	r3, [r4, #28]
 800441a:	9a00      	ldr	r2, [sp, #0]
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	9b04      	ldr	r3, [sp, #16]
 8004420:	2b0e      	cmp	r3, #14
 8004422:	f200 80a8 	bhi.w	8004576 <_dtoa_r+0x47e>
 8004426:	2d00      	cmp	r5, #0
 8004428:	f000 80a5 	beq.w	8004576 <_dtoa_r+0x47e>
 800442c:	f1bb 0f00 	cmp.w	fp, #0
 8004430:	dd38      	ble.n	80044a4 <_dtoa_r+0x3ac>
 8004432:	4bc0      	ldr	r3, [pc, #768]	; (8004734 <_dtoa_r+0x63c>)
 8004434:	f00b 020f 	and.w	r2, fp, #15
 8004438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800443c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004440:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004444:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004448:	d019      	beq.n	800447e <_dtoa_r+0x386>
 800444a:	4bbb      	ldr	r3, [pc, #748]	; (8004738 <_dtoa_r+0x640>)
 800444c:	ec51 0b18 	vmov	r0, r1, d8
 8004450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004454:	f7fc fa02 	bl	800085c <__aeabi_ddiv>
 8004458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800445c:	f008 080f 	and.w	r8, r8, #15
 8004460:	2503      	movs	r5, #3
 8004462:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004738 <_dtoa_r+0x640>
 8004466:	f1b8 0f00 	cmp.w	r8, #0
 800446a:	d10a      	bne.n	8004482 <_dtoa_r+0x38a>
 800446c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004470:	4632      	mov	r2, r6
 8004472:	463b      	mov	r3, r7
 8004474:	f7fc f9f2 	bl	800085c <__aeabi_ddiv>
 8004478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447c:	e02b      	b.n	80044d6 <_dtoa_r+0x3de>
 800447e:	2502      	movs	r5, #2
 8004480:	e7ef      	b.n	8004462 <_dtoa_r+0x36a>
 8004482:	f018 0f01 	tst.w	r8, #1
 8004486:	d008      	beq.n	800449a <_dtoa_r+0x3a2>
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004490:	f7fc f8ba 	bl	8000608 <__aeabi_dmul>
 8004494:	3501      	adds	r5, #1
 8004496:	4606      	mov	r6, r0
 8004498:	460f      	mov	r7, r1
 800449a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800449e:	f109 0908 	add.w	r9, r9, #8
 80044a2:	e7e0      	b.n	8004466 <_dtoa_r+0x36e>
 80044a4:	f000 809f 	beq.w	80045e6 <_dtoa_r+0x4ee>
 80044a8:	f1cb 0600 	rsb	r6, fp, #0
 80044ac:	4ba1      	ldr	r3, [pc, #644]	; (8004734 <_dtoa_r+0x63c>)
 80044ae:	4fa2      	ldr	r7, [pc, #648]	; (8004738 <_dtoa_r+0x640>)
 80044b0:	f006 020f 	and.w	r2, r6, #15
 80044b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	ec51 0b18 	vmov	r0, r1, d8
 80044c0:	f7fc f8a2 	bl	8000608 <__aeabi_dmul>
 80044c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044c8:	1136      	asrs	r6, r6, #4
 80044ca:	2300      	movs	r3, #0
 80044cc:	2502      	movs	r5, #2
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	d17e      	bne.n	80045d0 <_dtoa_r+0x4d8>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1d0      	bne.n	8004478 <_dtoa_r+0x380>
 80044d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8084 	beq.w	80045ea <_dtoa_r+0x4f2>
 80044e2:	4b96      	ldr	r3, [pc, #600]	; (800473c <_dtoa_r+0x644>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fc faff 	bl	8000aec <__aeabi_dcmplt>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d07b      	beq.n	80045ea <_dtoa_r+0x4f2>
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d078      	beq.n	80045ea <_dtoa_r+0x4f2>
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dd39      	ble.n	8004572 <_dtoa_r+0x47a>
 80044fe:	4b90      	ldr	r3, [pc, #576]	; (8004740 <_dtoa_r+0x648>)
 8004500:	2200      	movs	r2, #0
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f7fc f87f 	bl	8000608 <__aeabi_dmul>
 800450a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800450e:	9e01      	ldr	r6, [sp, #4]
 8004510:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004514:	3501      	adds	r5, #1
 8004516:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800451a:	4628      	mov	r0, r5
 800451c:	f7fc f80a 	bl	8000534 <__aeabi_i2d>
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	f7fc f870 	bl	8000608 <__aeabi_dmul>
 8004528:	4b86      	ldr	r3, [pc, #536]	; (8004744 <_dtoa_r+0x64c>)
 800452a:	2200      	movs	r2, #0
 800452c:	f7fb feb6 	bl	800029c <__adddf3>
 8004530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004538:	9303      	str	r3, [sp, #12]
 800453a:	2e00      	cmp	r6, #0
 800453c:	d158      	bne.n	80045f0 <_dtoa_r+0x4f8>
 800453e:	4b82      	ldr	r3, [pc, #520]	; (8004748 <_dtoa_r+0x650>)
 8004540:	2200      	movs	r2, #0
 8004542:	4640      	mov	r0, r8
 8004544:	4649      	mov	r1, r9
 8004546:	f7fb fea7 	bl	8000298 <__aeabi_dsub>
 800454a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800454e:	4680      	mov	r8, r0
 8004550:	4689      	mov	r9, r1
 8004552:	f7fc fae9 	bl	8000b28 <__aeabi_dcmpgt>
 8004556:	2800      	cmp	r0, #0
 8004558:	f040 8296 	bne.w	8004a88 <_dtoa_r+0x990>
 800455c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004560:	4640      	mov	r0, r8
 8004562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004566:	4649      	mov	r1, r9
 8004568:	f7fc fac0 	bl	8000aec <__aeabi_dcmplt>
 800456c:	2800      	cmp	r0, #0
 800456e:	f040 8289 	bne.w	8004a84 <_dtoa_r+0x98c>
 8004572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004578:	2b00      	cmp	r3, #0
 800457a:	f2c0 814e 	blt.w	800481a <_dtoa_r+0x722>
 800457e:	f1bb 0f0e 	cmp.w	fp, #14
 8004582:	f300 814a 	bgt.w	800481a <_dtoa_r+0x722>
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <_dtoa_r+0x63c>)
 8004588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800458c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	f280 80dc 	bge.w	8004750 <_dtoa_r+0x658>
 8004598:	9b04      	ldr	r3, [sp, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f300 80d8 	bgt.w	8004750 <_dtoa_r+0x658>
 80045a0:	f040 826f 	bne.w	8004a82 <_dtoa_r+0x98a>
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <_dtoa_r+0x650>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	4640      	mov	r0, r8
 80045aa:	4649      	mov	r1, r9
 80045ac:	f7fc f82c 	bl	8000608 <__aeabi_dmul>
 80045b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045b4:	f7fc faae 	bl	8000b14 <__aeabi_dcmpge>
 80045b8:	9e04      	ldr	r6, [sp, #16]
 80045ba:	4637      	mov	r7, r6
 80045bc:	2800      	cmp	r0, #0
 80045be:	f040 8245 	bne.w	8004a4c <_dtoa_r+0x954>
 80045c2:	9d00      	ldr	r5, [sp, #0]
 80045c4:	2331      	movs	r3, #49	; 0x31
 80045c6:	f805 3b01 	strb.w	r3, [r5], #1
 80045ca:	f10b 0b01 	add.w	fp, fp, #1
 80045ce:	e241      	b.n	8004a54 <_dtoa_r+0x95c>
 80045d0:	07f2      	lsls	r2, r6, #31
 80045d2:	d505      	bpl.n	80045e0 <_dtoa_r+0x4e8>
 80045d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d8:	f7fc f816 	bl	8000608 <__aeabi_dmul>
 80045dc:	3501      	adds	r5, #1
 80045de:	2301      	movs	r3, #1
 80045e0:	1076      	asrs	r6, r6, #1
 80045e2:	3708      	adds	r7, #8
 80045e4:	e773      	b.n	80044ce <_dtoa_r+0x3d6>
 80045e6:	2502      	movs	r5, #2
 80045e8:	e775      	b.n	80044d6 <_dtoa_r+0x3de>
 80045ea:	9e04      	ldr	r6, [sp, #16]
 80045ec:	465f      	mov	r7, fp
 80045ee:	e792      	b.n	8004516 <_dtoa_r+0x41e>
 80045f0:	9900      	ldr	r1, [sp, #0]
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <_dtoa_r+0x63c>)
 80045f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045f8:	4431      	add	r1, r6
 80045fa:	9102      	str	r1, [sp, #8]
 80045fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045fe:	eeb0 9a47 	vmov.f32	s18, s14
 8004602:	eef0 9a67 	vmov.f32	s19, s15
 8004606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800460a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800460e:	2900      	cmp	r1, #0
 8004610:	d044      	beq.n	800469c <_dtoa_r+0x5a4>
 8004612:	494e      	ldr	r1, [pc, #312]	; (800474c <_dtoa_r+0x654>)
 8004614:	2000      	movs	r0, #0
 8004616:	f7fc f921 	bl	800085c <__aeabi_ddiv>
 800461a:	ec53 2b19 	vmov	r2, r3, d9
 800461e:	f7fb fe3b 	bl	8000298 <__aeabi_dsub>
 8004622:	9d00      	ldr	r5, [sp, #0]
 8004624:	ec41 0b19 	vmov	d9, r0, r1
 8004628:	4649      	mov	r1, r9
 800462a:	4640      	mov	r0, r8
 800462c:	f7fc fa9c 	bl	8000b68 <__aeabi_d2iz>
 8004630:	4606      	mov	r6, r0
 8004632:	f7fb ff7f 	bl	8000534 <__aeabi_i2d>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4640      	mov	r0, r8
 800463c:	4649      	mov	r1, r9
 800463e:	f7fb fe2b 	bl	8000298 <__aeabi_dsub>
 8004642:	3630      	adds	r6, #48	; 0x30
 8004644:	f805 6b01 	strb.w	r6, [r5], #1
 8004648:	ec53 2b19 	vmov	r2, r3, d9
 800464c:	4680      	mov	r8, r0
 800464e:	4689      	mov	r9, r1
 8004650:	f7fc fa4c 	bl	8000aec <__aeabi_dcmplt>
 8004654:	2800      	cmp	r0, #0
 8004656:	d164      	bne.n	8004722 <_dtoa_r+0x62a>
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	4937      	ldr	r1, [pc, #220]	; (800473c <_dtoa_r+0x644>)
 800465e:	2000      	movs	r0, #0
 8004660:	f7fb fe1a 	bl	8000298 <__aeabi_dsub>
 8004664:	ec53 2b19 	vmov	r2, r3, d9
 8004668:	f7fc fa40 	bl	8000aec <__aeabi_dcmplt>
 800466c:	2800      	cmp	r0, #0
 800466e:	f040 80b6 	bne.w	80047de <_dtoa_r+0x6e6>
 8004672:	9b02      	ldr	r3, [sp, #8]
 8004674:	429d      	cmp	r5, r3
 8004676:	f43f af7c 	beq.w	8004572 <_dtoa_r+0x47a>
 800467a:	4b31      	ldr	r3, [pc, #196]	; (8004740 <_dtoa_r+0x648>)
 800467c:	ec51 0b19 	vmov	r0, r1, d9
 8004680:	2200      	movs	r2, #0
 8004682:	f7fb ffc1 	bl	8000608 <__aeabi_dmul>
 8004686:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <_dtoa_r+0x648>)
 8004688:	ec41 0b19 	vmov	d9, r0, r1
 800468c:	2200      	movs	r2, #0
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fb ffb9 	bl	8000608 <__aeabi_dmul>
 8004696:	4680      	mov	r8, r0
 8004698:	4689      	mov	r9, r1
 800469a:	e7c5      	b.n	8004628 <_dtoa_r+0x530>
 800469c:	ec51 0b17 	vmov	r0, r1, d7
 80046a0:	f7fb ffb2 	bl	8000608 <__aeabi_dmul>
 80046a4:	9b02      	ldr	r3, [sp, #8]
 80046a6:	9d00      	ldr	r5, [sp, #0]
 80046a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80046aa:	ec41 0b19 	vmov	d9, r0, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	4640      	mov	r0, r8
 80046b2:	f7fc fa59 	bl	8000b68 <__aeabi_d2iz>
 80046b6:	4606      	mov	r6, r0
 80046b8:	f7fb ff3c 	bl	8000534 <__aeabi_i2d>
 80046bc:	3630      	adds	r6, #48	; 0x30
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4640      	mov	r0, r8
 80046c4:	4649      	mov	r1, r9
 80046c6:	f7fb fde7 	bl	8000298 <__aeabi_dsub>
 80046ca:	f805 6b01 	strb.w	r6, [r5], #1
 80046ce:	9b02      	ldr	r3, [sp, #8]
 80046d0:	429d      	cmp	r5, r3
 80046d2:	4680      	mov	r8, r0
 80046d4:	4689      	mov	r9, r1
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	d124      	bne.n	8004726 <_dtoa_r+0x62e>
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <_dtoa_r+0x654>)
 80046de:	ec51 0b19 	vmov	r0, r1, d9
 80046e2:	f7fb fddb 	bl	800029c <__adddf3>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fc fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d173      	bne.n	80047de <_dtoa_r+0x6e6>
 80046f6:	ec53 2b19 	vmov	r2, r3, d9
 80046fa:	4914      	ldr	r1, [pc, #80]	; (800474c <_dtoa_r+0x654>)
 80046fc:	2000      	movs	r0, #0
 80046fe:	f7fb fdcb 	bl	8000298 <__aeabi_dsub>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4640      	mov	r0, r8
 8004708:	4649      	mov	r1, r9
 800470a:	f7fc f9ef 	bl	8000aec <__aeabi_dcmplt>
 800470e:	2800      	cmp	r0, #0
 8004710:	f43f af2f 	beq.w	8004572 <_dtoa_r+0x47a>
 8004714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004716:	1e6b      	subs	r3, r5, #1
 8004718:	930f      	str	r3, [sp, #60]	; 0x3c
 800471a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800471e:	2b30      	cmp	r3, #48	; 0x30
 8004720:	d0f8      	beq.n	8004714 <_dtoa_r+0x61c>
 8004722:	46bb      	mov	fp, r7
 8004724:	e04a      	b.n	80047bc <_dtoa_r+0x6c4>
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <_dtoa_r+0x648>)
 8004728:	f7fb ff6e 	bl	8000608 <__aeabi_dmul>
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	e7bd      	b.n	80046ae <_dtoa_r+0x5b6>
 8004732:	bf00      	nop
 8004734:	08006248 	.word	0x08006248
 8004738:	08006220 	.word	0x08006220
 800473c:	3ff00000 	.word	0x3ff00000
 8004740:	40240000 	.word	0x40240000
 8004744:	401c0000 	.word	0x401c0000
 8004748:	40140000 	.word	0x40140000
 800474c:	3fe00000 	.word	0x3fe00000
 8004750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004754:	9d00      	ldr	r5, [sp, #0]
 8004756:	4642      	mov	r2, r8
 8004758:	464b      	mov	r3, r9
 800475a:	4630      	mov	r0, r6
 800475c:	4639      	mov	r1, r7
 800475e:	f7fc f87d 	bl	800085c <__aeabi_ddiv>
 8004762:	f7fc fa01 	bl	8000b68 <__aeabi_d2iz>
 8004766:	9001      	str	r0, [sp, #4]
 8004768:	f7fb fee4 	bl	8000534 <__aeabi_i2d>
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	f7fb ff4a 	bl	8000608 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fd8c 	bl	8000298 <__aeabi_dsub>
 8004780:	9e01      	ldr	r6, [sp, #4]
 8004782:	9f04      	ldr	r7, [sp, #16]
 8004784:	3630      	adds	r6, #48	; 0x30
 8004786:	f805 6b01 	strb.w	r6, [r5], #1
 800478a:	9e00      	ldr	r6, [sp, #0]
 800478c:	1bae      	subs	r6, r5, r6
 800478e:	42b7      	cmp	r7, r6
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	d134      	bne.n	8004800 <_dtoa_r+0x708>
 8004796:	f7fb fd81 	bl	800029c <__adddf3>
 800479a:	4642      	mov	r2, r8
 800479c:	464b      	mov	r3, r9
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	f7fc f9c1 	bl	8000b28 <__aeabi_dcmpgt>
 80047a6:	b9c8      	cbnz	r0, 80047dc <_dtoa_r+0x6e4>
 80047a8:	4642      	mov	r2, r8
 80047aa:	464b      	mov	r3, r9
 80047ac:	4630      	mov	r0, r6
 80047ae:	4639      	mov	r1, r7
 80047b0:	f7fc f992 	bl	8000ad8 <__aeabi_dcmpeq>
 80047b4:	b110      	cbz	r0, 80047bc <_dtoa_r+0x6c4>
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	07db      	lsls	r3, r3, #31
 80047ba:	d40f      	bmi.n	80047dc <_dtoa_r+0x6e4>
 80047bc:	4651      	mov	r1, sl
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 fbcc 	bl	8004f5c <_Bfree>
 80047c4:	2300      	movs	r3, #0
 80047c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047c8:	702b      	strb	r3, [r5, #0]
 80047ca:	f10b 0301 	add.w	r3, fp, #1
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f43f ace2 	beq.w	800419c <_dtoa_r+0xa4>
 80047d8:	601d      	str	r5, [r3, #0]
 80047da:	e4df      	b.n	800419c <_dtoa_r+0xa4>
 80047dc:	465f      	mov	r7, fp
 80047de:	462b      	mov	r3, r5
 80047e0:	461d      	mov	r5, r3
 80047e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047e6:	2a39      	cmp	r2, #57	; 0x39
 80047e8:	d106      	bne.n	80047f8 <_dtoa_r+0x700>
 80047ea:	9a00      	ldr	r2, [sp, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1f7      	bne.n	80047e0 <_dtoa_r+0x6e8>
 80047f0:	9900      	ldr	r1, [sp, #0]
 80047f2:	2230      	movs	r2, #48	; 0x30
 80047f4:	3701      	adds	r7, #1
 80047f6:	700a      	strb	r2, [r1, #0]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	3201      	adds	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e790      	b.n	8004722 <_dtoa_r+0x62a>
 8004800:	4ba3      	ldr	r3, [pc, #652]	; (8004a90 <_dtoa_r+0x998>)
 8004802:	2200      	movs	r2, #0
 8004804:	f7fb ff00 	bl	8000608 <__aeabi_dmul>
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	4606      	mov	r6, r0
 800480e:	460f      	mov	r7, r1
 8004810:	f7fc f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8004814:	2800      	cmp	r0, #0
 8004816:	d09e      	beq.n	8004756 <_dtoa_r+0x65e>
 8004818:	e7d0      	b.n	80047bc <_dtoa_r+0x6c4>
 800481a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800481c:	2a00      	cmp	r2, #0
 800481e:	f000 80ca 	beq.w	80049b6 <_dtoa_r+0x8be>
 8004822:	9a07      	ldr	r2, [sp, #28]
 8004824:	2a01      	cmp	r2, #1
 8004826:	f300 80ad 	bgt.w	8004984 <_dtoa_r+0x88c>
 800482a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482c:	2a00      	cmp	r2, #0
 800482e:	f000 80a5 	beq.w	800497c <_dtoa_r+0x884>
 8004832:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004836:	9e08      	ldr	r6, [sp, #32]
 8004838:	9d05      	ldr	r5, [sp, #20]
 800483a:	9a05      	ldr	r2, [sp, #20]
 800483c:	441a      	add	r2, r3
 800483e:	9205      	str	r2, [sp, #20]
 8004840:	9a06      	ldr	r2, [sp, #24]
 8004842:	2101      	movs	r1, #1
 8004844:	441a      	add	r2, r3
 8004846:	4620      	mov	r0, r4
 8004848:	9206      	str	r2, [sp, #24]
 800484a:	f000 fc3d 	bl	80050c8 <__i2b>
 800484e:	4607      	mov	r7, r0
 8004850:	b165      	cbz	r5, 800486c <_dtoa_r+0x774>
 8004852:	9b06      	ldr	r3, [sp, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dd09      	ble.n	800486c <_dtoa_r+0x774>
 8004858:	42ab      	cmp	r3, r5
 800485a:	9a05      	ldr	r2, [sp, #20]
 800485c:	bfa8      	it	ge
 800485e:	462b      	movge	r3, r5
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	9205      	str	r2, [sp, #20]
 8004864:	9a06      	ldr	r2, [sp, #24]
 8004866:	1aed      	subs	r5, r5, r3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	9306      	str	r3, [sp, #24]
 800486c:	9b08      	ldr	r3, [sp, #32]
 800486e:	b1f3      	cbz	r3, 80048ae <_dtoa_r+0x7b6>
 8004870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80a3 	beq.w	80049be <_dtoa_r+0x8c6>
 8004878:	2e00      	cmp	r6, #0
 800487a:	dd10      	ble.n	800489e <_dtoa_r+0x7a6>
 800487c:	4639      	mov	r1, r7
 800487e:	4632      	mov	r2, r6
 8004880:	4620      	mov	r0, r4
 8004882:	f000 fce1 	bl	8005248 <__pow5mult>
 8004886:	4652      	mov	r2, sl
 8004888:	4601      	mov	r1, r0
 800488a:	4607      	mov	r7, r0
 800488c:	4620      	mov	r0, r4
 800488e:	f000 fc31 	bl	80050f4 <__multiply>
 8004892:	4651      	mov	r1, sl
 8004894:	4680      	mov	r8, r0
 8004896:	4620      	mov	r0, r4
 8004898:	f000 fb60 	bl	8004f5c <_Bfree>
 800489c:	46c2      	mov	sl, r8
 800489e:	9b08      	ldr	r3, [sp, #32]
 80048a0:	1b9a      	subs	r2, r3, r6
 80048a2:	d004      	beq.n	80048ae <_dtoa_r+0x7b6>
 80048a4:	4651      	mov	r1, sl
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fcce 	bl	8005248 <__pow5mult>
 80048ac:	4682      	mov	sl, r0
 80048ae:	2101      	movs	r1, #1
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 fc09 	bl	80050c8 <__i2b>
 80048b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	4606      	mov	r6, r0
 80048bc:	f340 8081 	ble.w	80049c2 <_dtoa_r+0x8ca>
 80048c0:	461a      	mov	r2, r3
 80048c2:	4601      	mov	r1, r0
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 fcbf 	bl	8005248 <__pow5mult>
 80048ca:	9b07      	ldr	r3, [sp, #28]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	4606      	mov	r6, r0
 80048d0:	dd7a      	ble.n	80049c8 <_dtoa_r+0x8d0>
 80048d2:	f04f 0800 	mov.w	r8, #0
 80048d6:	6933      	ldr	r3, [r6, #16]
 80048d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048dc:	6918      	ldr	r0, [r3, #16]
 80048de:	f000 fba5 	bl	800502c <__hi0bits>
 80048e2:	f1c0 0020 	rsb	r0, r0, #32
 80048e6:	9b06      	ldr	r3, [sp, #24]
 80048e8:	4418      	add	r0, r3
 80048ea:	f010 001f 	ands.w	r0, r0, #31
 80048ee:	f000 8094 	beq.w	8004a1a <_dtoa_r+0x922>
 80048f2:	f1c0 0320 	rsb	r3, r0, #32
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	f340 8085 	ble.w	8004a06 <_dtoa_r+0x90e>
 80048fc:	9b05      	ldr	r3, [sp, #20]
 80048fe:	f1c0 001c 	rsb	r0, r0, #28
 8004902:	4403      	add	r3, r0
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	9b06      	ldr	r3, [sp, #24]
 8004908:	4403      	add	r3, r0
 800490a:	4405      	add	r5, r0
 800490c:	9306      	str	r3, [sp, #24]
 800490e:	9b05      	ldr	r3, [sp, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	dd05      	ble.n	8004920 <_dtoa_r+0x828>
 8004914:	4651      	mov	r1, sl
 8004916:	461a      	mov	r2, r3
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fcef 	bl	80052fc <__lshift>
 800491e:	4682      	mov	sl, r0
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd05      	ble.n	8004932 <_dtoa_r+0x83a>
 8004926:	4631      	mov	r1, r6
 8004928:	461a      	mov	r2, r3
 800492a:	4620      	mov	r0, r4
 800492c:	f000 fce6 	bl	80052fc <__lshift>
 8004930:	4606      	mov	r6, r0
 8004932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d072      	beq.n	8004a1e <_dtoa_r+0x926>
 8004938:	4631      	mov	r1, r6
 800493a:	4650      	mov	r0, sl
 800493c:	f000 fd4a 	bl	80053d4 <__mcmp>
 8004940:	2800      	cmp	r0, #0
 8004942:	da6c      	bge.n	8004a1e <_dtoa_r+0x926>
 8004944:	2300      	movs	r3, #0
 8004946:	4651      	mov	r1, sl
 8004948:	220a      	movs	r2, #10
 800494a:	4620      	mov	r0, r4
 800494c:	f000 fb28 	bl	8004fa0 <__multadd>
 8004950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004956:	4682      	mov	sl, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 81b0 	beq.w	8004cbe <_dtoa_r+0xbc6>
 800495e:	2300      	movs	r3, #0
 8004960:	4639      	mov	r1, r7
 8004962:	220a      	movs	r2, #10
 8004964:	4620      	mov	r0, r4
 8004966:	f000 fb1b 	bl	8004fa0 <__multadd>
 800496a:	9b01      	ldr	r3, [sp, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	4607      	mov	r7, r0
 8004970:	f300 8096 	bgt.w	8004aa0 <_dtoa_r+0x9a8>
 8004974:	9b07      	ldr	r3, [sp, #28]
 8004976:	2b02      	cmp	r3, #2
 8004978:	dc59      	bgt.n	8004a2e <_dtoa_r+0x936>
 800497a:	e091      	b.n	8004aa0 <_dtoa_r+0x9a8>
 800497c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800497e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004982:	e758      	b.n	8004836 <_dtoa_r+0x73e>
 8004984:	9b04      	ldr	r3, [sp, #16]
 8004986:	1e5e      	subs	r6, r3, #1
 8004988:	9b08      	ldr	r3, [sp, #32]
 800498a:	42b3      	cmp	r3, r6
 800498c:	bfbf      	itttt	lt
 800498e:	9b08      	ldrlt	r3, [sp, #32]
 8004990:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004992:	9608      	strlt	r6, [sp, #32]
 8004994:	1af3      	sublt	r3, r6, r3
 8004996:	bfb4      	ite	lt
 8004998:	18d2      	addlt	r2, r2, r3
 800499a:	1b9e      	subge	r6, r3, r6
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	bfbc      	itt	lt
 80049a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80049a2:	2600      	movlt	r6, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bfb7      	itett	lt
 80049a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80049ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80049b0:	1a9d      	sublt	r5, r3, r2
 80049b2:	2300      	movlt	r3, #0
 80049b4:	e741      	b.n	800483a <_dtoa_r+0x742>
 80049b6:	9e08      	ldr	r6, [sp, #32]
 80049b8:	9d05      	ldr	r5, [sp, #20]
 80049ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80049bc:	e748      	b.n	8004850 <_dtoa_r+0x758>
 80049be:	9a08      	ldr	r2, [sp, #32]
 80049c0:	e770      	b.n	80048a4 <_dtoa_r+0x7ac>
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	dc19      	bgt.n	80049fc <_dtoa_r+0x904>
 80049c8:	9b02      	ldr	r3, [sp, #8]
 80049ca:	b9bb      	cbnz	r3, 80049fc <_dtoa_r+0x904>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d2:	b99b      	cbnz	r3, 80049fc <_dtoa_r+0x904>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049da:	0d1b      	lsrs	r3, r3, #20
 80049dc:	051b      	lsls	r3, r3, #20
 80049de:	b183      	cbz	r3, 8004a02 <_dtoa_r+0x90a>
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	3301      	adds	r3, #1
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	9b06      	ldr	r3, [sp, #24]
 80049e8:	3301      	adds	r3, #1
 80049ea:	9306      	str	r3, [sp, #24]
 80049ec:	f04f 0801 	mov.w	r8, #1
 80049f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f47f af6f 	bne.w	80048d6 <_dtoa_r+0x7de>
 80049f8:	2001      	movs	r0, #1
 80049fa:	e774      	b.n	80048e6 <_dtoa_r+0x7ee>
 80049fc:	f04f 0800 	mov.w	r8, #0
 8004a00:	e7f6      	b.n	80049f0 <_dtoa_r+0x8f8>
 8004a02:	4698      	mov	r8, r3
 8004a04:	e7f4      	b.n	80049f0 <_dtoa_r+0x8f8>
 8004a06:	d082      	beq.n	800490e <_dtoa_r+0x816>
 8004a08:	9a05      	ldr	r2, [sp, #20]
 8004a0a:	331c      	adds	r3, #28
 8004a0c:	441a      	add	r2, r3
 8004a0e:	9205      	str	r2, [sp, #20]
 8004a10:	9a06      	ldr	r2, [sp, #24]
 8004a12:	441a      	add	r2, r3
 8004a14:	441d      	add	r5, r3
 8004a16:	9206      	str	r2, [sp, #24]
 8004a18:	e779      	b.n	800490e <_dtoa_r+0x816>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	e7f4      	b.n	8004a08 <_dtoa_r+0x910>
 8004a1e:	9b04      	ldr	r3, [sp, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	dc37      	bgt.n	8004a94 <_dtoa_r+0x99c>
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	dd34      	ble.n	8004a94 <_dtoa_r+0x99c>
 8004a2a:	9b04      	ldr	r3, [sp, #16]
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	b963      	cbnz	r3, 8004a4c <_dtoa_r+0x954>
 8004a32:	4631      	mov	r1, r6
 8004a34:	2205      	movs	r2, #5
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 fab2 	bl	8004fa0 <__multadd>
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	4606      	mov	r6, r0
 8004a40:	4650      	mov	r0, sl
 8004a42:	f000 fcc7 	bl	80053d4 <__mcmp>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f73f adbb 	bgt.w	80045c2 <_dtoa_r+0x4ca>
 8004a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a4e:	9d00      	ldr	r5, [sp, #0]
 8004a50:	ea6f 0b03 	mvn.w	fp, r3
 8004a54:	f04f 0800 	mov.w	r8, #0
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 fa7e 	bl	8004f5c <_Bfree>
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	f43f aeab 	beq.w	80047bc <_dtoa_r+0x6c4>
 8004a66:	f1b8 0f00 	cmp.w	r8, #0
 8004a6a:	d005      	beq.n	8004a78 <_dtoa_r+0x980>
 8004a6c:	45b8      	cmp	r8, r7
 8004a6e:	d003      	beq.n	8004a78 <_dtoa_r+0x980>
 8004a70:	4641      	mov	r1, r8
 8004a72:	4620      	mov	r0, r4
 8004a74:	f000 fa72 	bl	8004f5c <_Bfree>
 8004a78:	4639      	mov	r1, r7
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 fa6e 	bl	8004f5c <_Bfree>
 8004a80:	e69c      	b.n	80047bc <_dtoa_r+0x6c4>
 8004a82:	2600      	movs	r6, #0
 8004a84:	4637      	mov	r7, r6
 8004a86:	e7e1      	b.n	8004a4c <_dtoa_r+0x954>
 8004a88:	46bb      	mov	fp, r7
 8004a8a:	4637      	mov	r7, r6
 8004a8c:	e599      	b.n	80045c2 <_dtoa_r+0x4ca>
 8004a8e:	bf00      	nop
 8004a90:	40240000 	.word	0x40240000
 8004a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80c8 	beq.w	8004c2c <_dtoa_r+0xb34>
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	2d00      	cmp	r5, #0
 8004aa2:	dd05      	ble.n	8004ab0 <_dtoa_r+0x9b8>
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	462a      	mov	r2, r5
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 fc27 	bl	80052fc <__lshift>
 8004aae:	4607      	mov	r7, r0
 8004ab0:	f1b8 0f00 	cmp.w	r8, #0
 8004ab4:	d05b      	beq.n	8004b6e <_dtoa_r+0xa76>
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fa0f 	bl	8004edc <_Balloc>
 8004abe:	4605      	mov	r5, r0
 8004ac0:	b928      	cbnz	r0, 8004ace <_dtoa_r+0x9d6>
 8004ac2:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <_dtoa_r+0xbd8>)
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004aca:	f7ff bb2e 	b.w	800412a <_dtoa_r+0x32>
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	3202      	adds	r2, #2
 8004ad2:	0092      	lsls	r2, r2, #2
 8004ad4:	f107 010c 	add.w	r1, r7, #12
 8004ad8:	300c      	adds	r0, #12
 8004ada:	f000 ffab 	bl	8005a34 <memcpy>
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f000 fc0a 	bl	80052fc <__lshift>
 8004ae8:	9b00      	ldr	r3, [sp, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af2:	4413      	add	r3, r2
 8004af4:	9308      	str	r3, [sp, #32]
 8004af6:	9b02      	ldr	r3, [sp, #8]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	46b8      	mov	r8, r7
 8004afe:	9306      	str	r3, [sp, #24]
 8004b00:	4607      	mov	r7, r0
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	4631      	mov	r1, r6
 8004b06:	3b01      	subs	r3, #1
 8004b08:	4650      	mov	r0, sl
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	f7ff fa69 	bl	8003fe2 <quorem>
 8004b10:	4641      	mov	r1, r8
 8004b12:	9002      	str	r0, [sp, #8]
 8004b14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004b18:	4650      	mov	r0, sl
 8004b1a:	f000 fc5b 	bl	80053d4 <__mcmp>
 8004b1e:	463a      	mov	r2, r7
 8004b20:	9005      	str	r0, [sp, #20]
 8004b22:	4631      	mov	r1, r6
 8004b24:	4620      	mov	r0, r4
 8004b26:	f000 fc71 	bl	800540c <__mdiff>
 8004b2a:	68c2      	ldr	r2, [r0, #12]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	bb02      	cbnz	r2, 8004b72 <_dtoa_r+0xa7a>
 8004b30:	4601      	mov	r1, r0
 8004b32:	4650      	mov	r0, sl
 8004b34:	f000 fc4e 	bl	80053d4 <__mcmp>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b40:	f000 fa0c 	bl	8004f5c <_Bfree>
 8004b44:	9b07      	ldr	r3, [sp, #28]
 8004b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b48:	9d04      	ldr	r5, [sp, #16]
 8004b4a:	ea43 0102 	orr.w	r1, r3, r2
 8004b4e:	9b06      	ldr	r3, [sp, #24]
 8004b50:	4319      	orrs	r1, r3
 8004b52:	d110      	bne.n	8004b76 <_dtoa_r+0xa7e>
 8004b54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004b58:	d029      	beq.n	8004bae <_dtoa_r+0xab6>
 8004b5a:	9b05      	ldr	r3, [sp, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dd02      	ble.n	8004b66 <_dtoa_r+0xa6e>
 8004b60:	9b02      	ldr	r3, [sp, #8]
 8004b62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004b66:	9b01      	ldr	r3, [sp, #4]
 8004b68:	f883 9000 	strb.w	r9, [r3]
 8004b6c:	e774      	b.n	8004a58 <_dtoa_r+0x960>
 8004b6e:	4638      	mov	r0, r7
 8004b70:	e7ba      	b.n	8004ae8 <_dtoa_r+0x9f0>
 8004b72:	2201      	movs	r2, #1
 8004b74:	e7e1      	b.n	8004b3a <_dtoa_r+0xa42>
 8004b76:	9b05      	ldr	r3, [sp, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db04      	blt.n	8004b86 <_dtoa_r+0xa8e>
 8004b7c:	9907      	ldr	r1, [sp, #28]
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	9906      	ldr	r1, [sp, #24]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	d120      	bne.n	8004bc8 <_dtoa_r+0xad0>
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	dded      	ble.n	8004b66 <_dtoa_r+0xa6e>
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f000 fbb4 	bl	80052fc <__lshift>
 8004b94:	4631      	mov	r1, r6
 8004b96:	4682      	mov	sl, r0
 8004b98:	f000 fc1c 	bl	80053d4 <__mcmp>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dc03      	bgt.n	8004ba8 <_dtoa_r+0xab0>
 8004ba0:	d1e1      	bne.n	8004b66 <_dtoa_r+0xa6e>
 8004ba2:	f019 0f01 	tst.w	r9, #1
 8004ba6:	d0de      	beq.n	8004b66 <_dtoa_r+0xa6e>
 8004ba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004bac:	d1d8      	bne.n	8004b60 <_dtoa_r+0xa68>
 8004bae:	9a01      	ldr	r2, [sp, #4]
 8004bb0:	2339      	movs	r3, #57	; 0x39
 8004bb2:	7013      	strb	r3, [r2, #0]
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004bbe:	2a39      	cmp	r2, #57	; 0x39
 8004bc0:	d06c      	beq.n	8004c9c <_dtoa_r+0xba4>
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e747      	b.n	8004a58 <_dtoa_r+0x960>
 8004bc8:	2a00      	cmp	r2, #0
 8004bca:	dd07      	ble.n	8004bdc <_dtoa_r+0xae4>
 8004bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004bd0:	d0ed      	beq.n	8004bae <_dtoa_r+0xab6>
 8004bd2:	9a01      	ldr	r2, [sp, #4]
 8004bd4:	f109 0301 	add.w	r3, r9, #1
 8004bd8:	7013      	strb	r3, [r2, #0]
 8004bda:	e73d      	b.n	8004a58 <_dtoa_r+0x960>
 8004bdc:	9b04      	ldr	r3, [sp, #16]
 8004bde:	9a08      	ldr	r2, [sp, #32]
 8004be0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d043      	beq.n	8004c70 <_dtoa_r+0xb78>
 8004be8:	4651      	mov	r1, sl
 8004bea:	2300      	movs	r3, #0
 8004bec:	220a      	movs	r2, #10
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f9d6 	bl	8004fa0 <__multadd>
 8004bf4:	45b8      	cmp	r8, r7
 8004bf6:	4682      	mov	sl, r0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	f04f 020a 	mov.w	r2, #10
 8004c00:	4641      	mov	r1, r8
 8004c02:	4620      	mov	r0, r4
 8004c04:	d107      	bne.n	8004c16 <_dtoa_r+0xb1e>
 8004c06:	f000 f9cb 	bl	8004fa0 <__multadd>
 8004c0a:	4680      	mov	r8, r0
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	9b04      	ldr	r3, [sp, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	e775      	b.n	8004b02 <_dtoa_r+0xa0a>
 8004c16:	f000 f9c3 	bl	8004fa0 <__multadd>
 8004c1a:	4639      	mov	r1, r7
 8004c1c:	4680      	mov	r8, r0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	220a      	movs	r2, #10
 8004c22:	4620      	mov	r0, r4
 8004c24:	f000 f9bc 	bl	8004fa0 <__multadd>
 8004c28:	4607      	mov	r7, r0
 8004c2a:	e7f0      	b.n	8004c0e <_dtoa_r+0xb16>
 8004c2c:	9b04      	ldr	r3, [sp, #16]
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	9d00      	ldr	r5, [sp, #0]
 8004c32:	4631      	mov	r1, r6
 8004c34:	4650      	mov	r0, sl
 8004c36:	f7ff f9d4 	bl	8003fe2 <quorem>
 8004c3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c3e:	9b00      	ldr	r3, [sp, #0]
 8004c40:	f805 9b01 	strb.w	r9, [r5], #1
 8004c44:	1aea      	subs	r2, r5, r3
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	dd07      	ble.n	8004c5c <_dtoa_r+0xb64>
 8004c4c:	4651      	mov	r1, sl
 8004c4e:	2300      	movs	r3, #0
 8004c50:	220a      	movs	r2, #10
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 f9a4 	bl	8004fa0 <__multadd>
 8004c58:	4682      	mov	sl, r0
 8004c5a:	e7ea      	b.n	8004c32 <_dtoa_r+0xb3a>
 8004c5c:	9b01      	ldr	r3, [sp, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfc8      	it	gt
 8004c62:	461d      	movgt	r5, r3
 8004c64:	9b00      	ldr	r3, [sp, #0]
 8004c66:	bfd8      	it	le
 8004c68:	2501      	movle	r5, #1
 8004c6a:	441d      	add	r5, r3
 8004c6c:	f04f 0800 	mov.w	r8, #0
 8004c70:	4651      	mov	r1, sl
 8004c72:	2201      	movs	r2, #1
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 fb41 	bl	80052fc <__lshift>
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4682      	mov	sl, r0
 8004c7e:	f000 fba9 	bl	80053d4 <__mcmp>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	dc96      	bgt.n	8004bb4 <_dtoa_r+0xabc>
 8004c86:	d102      	bne.n	8004c8e <_dtoa_r+0xb96>
 8004c88:	f019 0f01 	tst.w	r9, #1
 8004c8c:	d192      	bne.n	8004bb4 <_dtoa_r+0xabc>
 8004c8e:	462b      	mov	r3, r5
 8004c90:	461d      	mov	r5, r3
 8004c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c96:	2a30      	cmp	r2, #48	; 0x30
 8004c98:	d0fa      	beq.n	8004c90 <_dtoa_r+0xb98>
 8004c9a:	e6dd      	b.n	8004a58 <_dtoa_r+0x960>
 8004c9c:	9a00      	ldr	r2, [sp, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d189      	bne.n	8004bb6 <_dtoa_r+0xabe>
 8004ca2:	f10b 0b01 	add.w	fp, fp, #1
 8004ca6:	2331      	movs	r3, #49	; 0x31
 8004ca8:	e796      	b.n	8004bd8 <_dtoa_r+0xae0>
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <_dtoa_r+0xbdc>)
 8004cac:	f7ff ba99 	b.w	80041e2 <_dtoa_r+0xea>
 8004cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f47f aa6d 	bne.w	8004192 <_dtoa_r+0x9a>
 8004cb8:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <_dtoa_r+0xbe0>)
 8004cba:	f7ff ba92 	b.w	80041e2 <_dtoa_r+0xea>
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dcb5      	bgt.n	8004c30 <_dtoa_r+0xb38>
 8004cc4:	9b07      	ldr	r3, [sp, #28]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	f73f aeb1 	bgt.w	8004a2e <_dtoa_r+0x936>
 8004ccc:	e7b0      	b.n	8004c30 <_dtoa_r+0xb38>
 8004cce:	bf00      	nop
 8004cd0:	080061b4 	.word	0x080061b4
 8004cd4:	08006114 	.word	0x08006114
 8004cd8:	08006138 	.word	0x08006138

08004cdc <_free_r>:
 8004cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d044      	beq.n	8004d6c <_free_r+0x90>
 8004ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce6:	9001      	str	r0, [sp, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f1a1 0404 	sub.w	r4, r1, #4
 8004cee:	bfb8      	it	lt
 8004cf0:	18e4      	addlt	r4, r4, r3
 8004cf2:	f000 f8e7 	bl	8004ec4 <__malloc_lock>
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <_free_r+0x94>)
 8004cf8:	9801      	ldr	r0, [sp, #4]
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	b933      	cbnz	r3, 8004d0c <_free_r+0x30>
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6014      	str	r4, [r2, #0]
 8004d02:	b003      	add	sp, #12
 8004d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d08:	f000 b8e2 	b.w	8004ed0 <__malloc_unlock>
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	d908      	bls.n	8004d22 <_free_r+0x46>
 8004d10:	6825      	ldr	r5, [r4, #0]
 8004d12:	1961      	adds	r1, r4, r5
 8004d14:	428b      	cmp	r3, r1
 8004d16:	bf01      	itttt	eq
 8004d18:	6819      	ldreq	r1, [r3, #0]
 8004d1a:	685b      	ldreq	r3, [r3, #4]
 8004d1c:	1949      	addeq	r1, r1, r5
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	e7ed      	b.n	8004cfe <_free_r+0x22>
 8004d22:	461a      	mov	r2, r3
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <_free_r+0x50>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d9fa      	bls.n	8004d22 <_free_r+0x46>
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	1855      	adds	r5, r2, r1
 8004d30:	42a5      	cmp	r5, r4
 8004d32:	d10b      	bne.n	8004d4c <_free_r+0x70>
 8004d34:	6824      	ldr	r4, [r4, #0]
 8004d36:	4421      	add	r1, r4
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	d1e0      	bne.n	8004d02 <_free_r+0x26>
 8004d40:	681c      	ldr	r4, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	6053      	str	r3, [r2, #4]
 8004d46:	440c      	add	r4, r1
 8004d48:	6014      	str	r4, [r2, #0]
 8004d4a:	e7da      	b.n	8004d02 <_free_r+0x26>
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x78>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	e7d6      	b.n	8004d02 <_free_r+0x26>
 8004d54:	6825      	ldr	r5, [r4, #0]
 8004d56:	1961      	adds	r1, r4, r5
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf04      	itt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	bf04      	itt	eq
 8004d64:	1949      	addeq	r1, r1, r5
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	6054      	str	r4, [r2, #4]
 8004d6a:	e7ca      	b.n	8004d02 <_free_r+0x26>
 8004d6c:	b003      	add	sp, #12
 8004d6e:	bd30      	pop	{r4, r5, pc}
 8004d70:	20000424 	.word	0x20000424

08004d74 <malloc>:
 8004d74:	4b02      	ldr	r3, [pc, #8]	; (8004d80 <malloc+0xc>)
 8004d76:	4601      	mov	r1, r0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f000 b823 	b.w	8004dc4 <_malloc_r>
 8004d7e:	bf00      	nop
 8004d80:	20000068 	.word	0x20000068

08004d84 <sbrk_aligned>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4e0e      	ldr	r6, [pc, #56]	; (8004dc0 <sbrk_aligned+0x3c>)
 8004d88:	460c      	mov	r4, r1
 8004d8a:	6831      	ldr	r1, [r6, #0]
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	b911      	cbnz	r1, 8004d96 <sbrk_aligned+0x12>
 8004d90:	f000 fe40 	bl	8005a14 <_sbrk_r>
 8004d94:	6030      	str	r0, [r6, #0]
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 fe3b 	bl	8005a14 <_sbrk_r>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d00a      	beq.n	8004db8 <sbrk_aligned+0x34>
 8004da2:	1cc4      	adds	r4, r0, #3
 8004da4:	f024 0403 	bic.w	r4, r4, #3
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d007      	beq.n	8004dbc <sbrk_aligned+0x38>
 8004dac:	1a21      	subs	r1, r4, r0
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 fe30 	bl	8005a14 <_sbrk_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d101      	bne.n	8004dbc <sbrk_aligned+0x38>
 8004db8:	f04f 34ff 	mov.w	r4, #4294967295
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	20000428 	.word	0x20000428

08004dc4 <_malloc_r>:
 8004dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	1ccd      	adds	r5, r1, #3
 8004dca:	f025 0503 	bic.w	r5, r5, #3
 8004dce:	3508      	adds	r5, #8
 8004dd0:	2d0c      	cmp	r5, #12
 8004dd2:	bf38      	it	cc
 8004dd4:	250c      	movcc	r5, #12
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	4607      	mov	r7, r0
 8004dda:	db01      	blt.n	8004de0 <_malloc_r+0x1c>
 8004ddc:	42a9      	cmp	r1, r5
 8004dde:	d905      	bls.n	8004dec <_malloc_r+0x28>
 8004de0:	230c      	movs	r3, #12
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	2600      	movs	r6, #0
 8004de6:	4630      	mov	r0, r6
 8004de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ec0 <_malloc_r+0xfc>
 8004df0:	f000 f868 	bl	8004ec4 <__malloc_lock>
 8004df4:	f8d8 3000 	ldr.w	r3, [r8]
 8004df8:	461c      	mov	r4, r3
 8004dfa:	bb5c      	cbnz	r4, 8004e54 <_malloc_r+0x90>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7ff ffc0 	bl	8004d84 <sbrk_aligned>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	4604      	mov	r4, r0
 8004e08:	d155      	bne.n	8004eb6 <_malloc_r+0xf2>
 8004e0a:	f8d8 4000 	ldr.w	r4, [r8]
 8004e0e:	4626      	mov	r6, r4
 8004e10:	2e00      	cmp	r6, #0
 8004e12:	d145      	bne.n	8004ea0 <_malloc_r+0xdc>
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	d048      	beq.n	8004eaa <_malloc_r+0xe6>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	eb04 0903 	add.w	r9, r4, r3
 8004e22:	f000 fdf7 	bl	8005a14 <_sbrk_r>
 8004e26:	4581      	cmp	r9, r0
 8004e28:	d13f      	bne.n	8004eaa <_malloc_r+0xe6>
 8004e2a:	6821      	ldr	r1, [r4, #0]
 8004e2c:	1a6d      	subs	r5, r5, r1
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff ffa7 	bl	8004d84 <sbrk_aligned>
 8004e36:	3001      	adds	r0, #1
 8004e38:	d037      	beq.n	8004eaa <_malloc_r+0xe6>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	442b      	add	r3, r5
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f8d8 3000 	ldr.w	r3, [r8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d038      	beq.n	8004eba <_malloc_r+0xf6>
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	42a2      	cmp	r2, r4
 8004e4c:	d12b      	bne.n	8004ea6 <_malloc_r+0xe2>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	e00f      	b.n	8004e74 <_malloc_r+0xb0>
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	1b52      	subs	r2, r2, r5
 8004e58:	d41f      	bmi.n	8004e9a <_malloc_r+0xd6>
 8004e5a:	2a0b      	cmp	r2, #11
 8004e5c:	d917      	bls.n	8004e8e <_malloc_r+0xca>
 8004e5e:	1961      	adds	r1, r4, r5
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	6025      	str	r5, [r4, #0]
 8004e64:	bf18      	it	ne
 8004e66:	6059      	strne	r1, [r3, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	bf08      	it	eq
 8004e6c:	f8c8 1000 	streq.w	r1, [r8]
 8004e70:	5162      	str	r2, [r4, r5]
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	4638      	mov	r0, r7
 8004e76:	f104 060b 	add.w	r6, r4, #11
 8004e7a:	f000 f829 	bl	8004ed0 <__malloc_unlock>
 8004e7e:	f026 0607 	bic.w	r6, r6, #7
 8004e82:	1d23      	adds	r3, r4, #4
 8004e84:	1af2      	subs	r2, r6, r3
 8004e86:	d0ae      	beq.n	8004de6 <_malloc_r+0x22>
 8004e88:	1b9b      	subs	r3, r3, r6
 8004e8a:	50a3      	str	r3, [r4, r2]
 8004e8c:	e7ab      	b.n	8004de6 <_malloc_r+0x22>
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	6862      	ldr	r2, [r4, #4]
 8004e92:	d1dd      	bne.n	8004e50 <_malloc_r+0x8c>
 8004e94:	f8c8 2000 	str.w	r2, [r8]
 8004e98:	e7ec      	b.n	8004e74 <_malloc_r+0xb0>
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	6864      	ldr	r4, [r4, #4]
 8004e9e:	e7ac      	b.n	8004dfa <_malloc_r+0x36>
 8004ea0:	4634      	mov	r4, r6
 8004ea2:	6876      	ldr	r6, [r6, #4]
 8004ea4:	e7b4      	b.n	8004e10 <_malloc_r+0x4c>
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	e7cc      	b.n	8004e44 <_malloc_r+0x80>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f000 f80e 	bl	8004ed0 <__malloc_unlock>
 8004eb4:	e797      	b.n	8004de6 <_malloc_r+0x22>
 8004eb6:	6025      	str	r5, [r4, #0]
 8004eb8:	e7dc      	b.n	8004e74 <_malloc_r+0xb0>
 8004eba:	605b      	str	r3, [r3, #4]
 8004ebc:	deff      	udf	#255	; 0xff
 8004ebe:	bf00      	nop
 8004ec0:	20000424 	.word	0x20000424

08004ec4 <__malloc_lock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__malloc_lock+0x8>)
 8004ec6:	f7ff b88a 	b.w	8003fde <__retarget_lock_acquire_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000420 	.word	0x20000420

08004ed0 <__malloc_unlock>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__malloc_unlock+0x8>)
 8004ed2:	f7ff b885 	b.w	8003fe0 <__retarget_lock_release_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	20000420 	.word	0x20000420

08004edc <_Balloc>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	69c6      	ldr	r6, [r0, #28]
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	b976      	cbnz	r6, 8004f04 <_Balloc+0x28>
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	f7ff ff44 	bl	8004d74 <malloc>
 8004eec:	4602      	mov	r2, r0
 8004eee:	61e0      	str	r0, [r4, #28]
 8004ef0:	b920      	cbnz	r0, 8004efc <_Balloc+0x20>
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <_Balloc+0x78>)
 8004ef4:	4818      	ldr	r0, [pc, #96]	; (8004f58 <_Balloc+0x7c>)
 8004ef6:	216b      	movs	r1, #107	; 0x6b
 8004ef8:	f000 fdaa 	bl	8005a50 <__assert_func>
 8004efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f00:	6006      	str	r6, [r0, #0]
 8004f02:	60c6      	str	r6, [r0, #12]
 8004f04:	69e6      	ldr	r6, [r4, #28]
 8004f06:	68f3      	ldr	r3, [r6, #12]
 8004f08:	b183      	cbz	r3, 8004f2c <_Balloc+0x50>
 8004f0a:	69e3      	ldr	r3, [r4, #28]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f12:	b9b8      	cbnz	r0, 8004f44 <_Balloc+0x68>
 8004f14:	2101      	movs	r1, #1
 8004f16:	fa01 f605 	lsl.w	r6, r1, r5
 8004f1a:	1d72      	adds	r2, r6, #5
 8004f1c:	0092      	lsls	r2, r2, #2
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 fdb4 	bl	8005a8c <_calloc_r>
 8004f24:	b160      	cbz	r0, 8004f40 <_Balloc+0x64>
 8004f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f2a:	e00e      	b.n	8004f4a <_Balloc+0x6e>
 8004f2c:	2221      	movs	r2, #33	; 0x21
 8004f2e:	2104      	movs	r1, #4
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fdab 	bl	8005a8c <_calloc_r>
 8004f36:	69e3      	ldr	r3, [r4, #28]
 8004f38:	60f0      	str	r0, [r6, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e4      	bne.n	8004f0a <_Balloc+0x2e>
 8004f40:	2000      	movs	r0, #0
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	6802      	ldr	r2, [r0, #0]
 8004f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f50:	e7f7      	b.n	8004f42 <_Balloc+0x66>
 8004f52:	bf00      	nop
 8004f54:	08006145 	.word	0x08006145
 8004f58:	080061c5 	.word	0x080061c5

08004f5c <_Bfree>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	69c6      	ldr	r6, [r0, #28]
 8004f60:	4605      	mov	r5, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	b976      	cbnz	r6, 8004f84 <_Bfree+0x28>
 8004f66:	2010      	movs	r0, #16
 8004f68:	f7ff ff04 	bl	8004d74 <malloc>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	61e8      	str	r0, [r5, #28]
 8004f70:	b920      	cbnz	r0, 8004f7c <_Bfree+0x20>
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <_Bfree+0x3c>)
 8004f74:	4809      	ldr	r0, [pc, #36]	; (8004f9c <_Bfree+0x40>)
 8004f76:	218f      	movs	r1, #143	; 0x8f
 8004f78:	f000 fd6a 	bl	8005a50 <__assert_func>
 8004f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f80:	6006      	str	r6, [r0, #0]
 8004f82:	60c6      	str	r6, [r0, #12]
 8004f84:	b13c      	cbz	r4, 8004f96 <_Bfree+0x3a>
 8004f86:	69eb      	ldr	r3, [r5, #28]
 8004f88:	6862      	ldr	r2, [r4, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f90:	6021      	str	r1, [r4, #0]
 8004f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	08006145 	.word	0x08006145
 8004f9c:	080061c5 	.word	0x080061c5

08004fa0 <__multadd>:
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	690d      	ldr	r5, [r1, #16]
 8004fa6:	4607      	mov	r7, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	461e      	mov	r6, r3
 8004fac:	f101 0c14 	add.w	ip, r1, #20
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8004fb6:	b299      	uxth	r1, r3
 8004fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8004fbc:	0c1e      	lsrs	r6, r3, #16
 8004fbe:	0c0b      	lsrs	r3, r1, #16
 8004fc0:	fb02 3306 	mla	r3, r2, r6, r3
 8004fc4:	b289      	uxth	r1, r1
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fcc:	4285      	cmp	r5, r0
 8004fce:	f84c 1b04 	str.w	r1, [ip], #4
 8004fd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fd6:	dcec      	bgt.n	8004fb2 <__multadd+0x12>
 8004fd8:	b30e      	cbz	r6, 800501e <__multadd+0x7e>
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dc19      	bgt.n	8005014 <__multadd+0x74>
 8004fe0:	6861      	ldr	r1, [r4, #4]
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	3101      	adds	r1, #1
 8004fe6:	f7ff ff79 	bl	8004edc <_Balloc>
 8004fea:	4680      	mov	r8, r0
 8004fec:	b928      	cbnz	r0, 8004ffa <__multadd+0x5a>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <__multadd+0x84>)
 8004ff2:	480d      	ldr	r0, [pc, #52]	; (8005028 <__multadd+0x88>)
 8004ff4:	21ba      	movs	r1, #186	; 0xba
 8004ff6:	f000 fd2b 	bl	8005a50 <__assert_func>
 8004ffa:	6922      	ldr	r2, [r4, #16]
 8004ffc:	3202      	adds	r2, #2
 8004ffe:	f104 010c 	add.w	r1, r4, #12
 8005002:	0092      	lsls	r2, r2, #2
 8005004:	300c      	adds	r0, #12
 8005006:	f000 fd15 	bl	8005a34 <memcpy>
 800500a:	4621      	mov	r1, r4
 800500c:	4638      	mov	r0, r7
 800500e:	f7ff ffa5 	bl	8004f5c <_Bfree>
 8005012:	4644      	mov	r4, r8
 8005014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005018:	3501      	adds	r5, #1
 800501a:	615e      	str	r6, [r3, #20]
 800501c:	6125      	str	r5, [r4, #16]
 800501e:	4620      	mov	r0, r4
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005024:	080061b4 	.word	0x080061b4
 8005028:	080061c5 	.word	0x080061c5

0800502c <__hi0bits>:
 800502c:	0c03      	lsrs	r3, r0, #16
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	b9d3      	cbnz	r3, 8005068 <__hi0bits+0x3c>
 8005032:	0400      	lsls	r0, r0, #16
 8005034:	2310      	movs	r3, #16
 8005036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800503a:	bf04      	itt	eq
 800503c:	0200      	lsleq	r0, r0, #8
 800503e:	3308      	addeq	r3, #8
 8005040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005044:	bf04      	itt	eq
 8005046:	0100      	lsleq	r0, r0, #4
 8005048:	3304      	addeq	r3, #4
 800504a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800504e:	bf04      	itt	eq
 8005050:	0080      	lsleq	r0, r0, #2
 8005052:	3302      	addeq	r3, #2
 8005054:	2800      	cmp	r0, #0
 8005056:	db05      	blt.n	8005064 <__hi0bits+0x38>
 8005058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800505c:	f103 0301 	add.w	r3, r3, #1
 8005060:	bf08      	it	eq
 8005062:	2320      	moveq	r3, #32
 8005064:	4618      	mov	r0, r3
 8005066:	4770      	bx	lr
 8005068:	2300      	movs	r3, #0
 800506a:	e7e4      	b.n	8005036 <__hi0bits+0xa>

0800506c <__lo0bits>:
 800506c:	6803      	ldr	r3, [r0, #0]
 800506e:	f013 0207 	ands.w	r2, r3, #7
 8005072:	d00c      	beq.n	800508e <__lo0bits+0x22>
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	d422      	bmi.n	80050be <__lo0bits+0x52>
 8005078:	079a      	lsls	r2, r3, #30
 800507a:	bf49      	itett	mi
 800507c:	085b      	lsrmi	r3, r3, #1
 800507e:	089b      	lsrpl	r3, r3, #2
 8005080:	6003      	strmi	r3, [r0, #0]
 8005082:	2201      	movmi	r2, #1
 8005084:	bf5c      	itt	pl
 8005086:	6003      	strpl	r3, [r0, #0]
 8005088:	2202      	movpl	r2, #2
 800508a:	4610      	mov	r0, r2
 800508c:	4770      	bx	lr
 800508e:	b299      	uxth	r1, r3
 8005090:	b909      	cbnz	r1, 8005096 <__lo0bits+0x2a>
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	2210      	movs	r2, #16
 8005096:	b2d9      	uxtb	r1, r3
 8005098:	b909      	cbnz	r1, 800509e <__lo0bits+0x32>
 800509a:	3208      	adds	r2, #8
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	0719      	lsls	r1, r3, #28
 80050a0:	bf04      	itt	eq
 80050a2:	091b      	lsreq	r3, r3, #4
 80050a4:	3204      	addeq	r2, #4
 80050a6:	0799      	lsls	r1, r3, #30
 80050a8:	bf04      	itt	eq
 80050aa:	089b      	lsreq	r3, r3, #2
 80050ac:	3202      	addeq	r2, #2
 80050ae:	07d9      	lsls	r1, r3, #31
 80050b0:	d403      	bmi.n	80050ba <__lo0bits+0x4e>
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f102 0201 	add.w	r2, r2, #1
 80050b8:	d003      	beq.n	80050c2 <__lo0bits+0x56>
 80050ba:	6003      	str	r3, [r0, #0]
 80050bc:	e7e5      	b.n	800508a <__lo0bits+0x1e>
 80050be:	2200      	movs	r2, #0
 80050c0:	e7e3      	b.n	800508a <__lo0bits+0x1e>
 80050c2:	2220      	movs	r2, #32
 80050c4:	e7e1      	b.n	800508a <__lo0bits+0x1e>
	...

080050c8 <__i2b>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	2101      	movs	r1, #1
 80050ce:	f7ff ff05 	bl	8004edc <_Balloc>
 80050d2:	4602      	mov	r2, r0
 80050d4:	b928      	cbnz	r0, 80050e2 <__i2b+0x1a>
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <__i2b+0x24>)
 80050d8:	4805      	ldr	r0, [pc, #20]	; (80050f0 <__i2b+0x28>)
 80050da:	f240 1145 	movw	r1, #325	; 0x145
 80050de:	f000 fcb7 	bl	8005a50 <__assert_func>
 80050e2:	2301      	movs	r3, #1
 80050e4:	6144      	str	r4, [r0, #20]
 80050e6:	6103      	str	r3, [r0, #16]
 80050e8:	bd10      	pop	{r4, pc}
 80050ea:	bf00      	nop
 80050ec:	080061b4 	.word	0x080061b4
 80050f0:	080061c5 	.word	0x080061c5

080050f4 <__multiply>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	4691      	mov	r9, r2
 80050fa:	690a      	ldr	r2, [r1, #16]
 80050fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	bfb8      	it	lt
 8005104:	460b      	movlt	r3, r1
 8005106:	460c      	mov	r4, r1
 8005108:	bfbc      	itt	lt
 800510a:	464c      	movlt	r4, r9
 800510c:	4699      	movlt	r9, r3
 800510e:	6927      	ldr	r7, [r4, #16]
 8005110:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	6861      	ldr	r1, [r4, #4]
 8005118:	eb07 060a 	add.w	r6, r7, sl
 800511c:	42b3      	cmp	r3, r6
 800511e:	b085      	sub	sp, #20
 8005120:	bfb8      	it	lt
 8005122:	3101      	addlt	r1, #1
 8005124:	f7ff feda 	bl	8004edc <_Balloc>
 8005128:	b930      	cbnz	r0, 8005138 <__multiply+0x44>
 800512a:	4602      	mov	r2, r0
 800512c:	4b44      	ldr	r3, [pc, #272]	; (8005240 <__multiply+0x14c>)
 800512e:	4845      	ldr	r0, [pc, #276]	; (8005244 <__multiply+0x150>)
 8005130:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005134:	f000 fc8c 	bl	8005a50 <__assert_func>
 8005138:	f100 0514 	add.w	r5, r0, #20
 800513c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005140:	462b      	mov	r3, r5
 8005142:	2200      	movs	r2, #0
 8005144:	4543      	cmp	r3, r8
 8005146:	d321      	bcc.n	800518c <__multiply+0x98>
 8005148:	f104 0314 	add.w	r3, r4, #20
 800514c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005150:	f109 0314 	add.w	r3, r9, #20
 8005154:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005158:	9202      	str	r2, [sp, #8]
 800515a:	1b3a      	subs	r2, r7, r4
 800515c:	3a15      	subs	r2, #21
 800515e:	f022 0203 	bic.w	r2, r2, #3
 8005162:	3204      	adds	r2, #4
 8005164:	f104 0115 	add.w	r1, r4, #21
 8005168:	428f      	cmp	r7, r1
 800516a:	bf38      	it	cc
 800516c:	2204      	movcc	r2, #4
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	9a02      	ldr	r2, [sp, #8]
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d80c      	bhi.n	8005192 <__multiply+0x9e>
 8005178:	2e00      	cmp	r6, #0
 800517a:	dd03      	ble.n	8005184 <__multiply+0x90>
 800517c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05b      	beq.n	800523c <__multiply+0x148>
 8005184:	6106      	str	r6, [r0, #16]
 8005186:	b005      	add	sp, #20
 8005188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518c:	f843 2b04 	str.w	r2, [r3], #4
 8005190:	e7d8      	b.n	8005144 <__multiply+0x50>
 8005192:	f8b3 a000 	ldrh.w	sl, [r3]
 8005196:	f1ba 0f00 	cmp.w	sl, #0
 800519a:	d024      	beq.n	80051e6 <__multiply+0xf2>
 800519c:	f104 0e14 	add.w	lr, r4, #20
 80051a0:	46a9      	mov	r9, r5
 80051a2:	f04f 0c00 	mov.w	ip, #0
 80051a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051aa:	f8d9 1000 	ldr.w	r1, [r9]
 80051ae:	fa1f fb82 	uxth.w	fp, r2
 80051b2:	b289      	uxth	r1, r1
 80051b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80051b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051bc:	f8d9 2000 	ldr.w	r2, [r9]
 80051c0:	4461      	add	r1, ip
 80051c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80051ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051ce:	b289      	uxth	r1, r1
 80051d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051d4:	4577      	cmp	r7, lr
 80051d6:	f849 1b04 	str.w	r1, [r9], #4
 80051da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051de:	d8e2      	bhi.n	80051a6 <__multiply+0xb2>
 80051e0:	9a01      	ldr	r2, [sp, #4]
 80051e2:	f845 c002 	str.w	ip, [r5, r2]
 80051e6:	9a03      	ldr	r2, [sp, #12]
 80051e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051ec:	3304      	adds	r3, #4
 80051ee:	f1b9 0f00 	cmp.w	r9, #0
 80051f2:	d021      	beq.n	8005238 <__multiply+0x144>
 80051f4:	6829      	ldr	r1, [r5, #0]
 80051f6:	f104 0c14 	add.w	ip, r4, #20
 80051fa:	46ae      	mov	lr, r5
 80051fc:	f04f 0a00 	mov.w	sl, #0
 8005200:	f8bc b000 	ldrh.w	fp, [ip]
 8005204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005208:	fb09 220b 	mla	r2, r9, fp, r2
 800520c:	4452      	add	r2, sl
 800520e:	b289      	uxth	r1, r1
 8005210:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005214:	f84e 1b04 	str.w	r1, [lr], #4
 8005218:	f85c 1b04 	ldr.w	r1, [ip], #4
 800521c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005220:	f8be 1000 	ldrh.w	r1, [lr]
 8005224:	fb09 110a 	mla	r1, r9, sl, r1
 8005228:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800522c:	4567      	cmp	r7, ip
 800522e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005232:	d8e5      	bhi.n	8005200 <__multiply+0x10c>
 8005234:	9a01      	ldr	r2, [sp, #4]
 8005236:	50a9      	str	r1, [r5, r2]
 8005238:	3504      	adds	r5, #4
 800523a:	e799      	b.n	8005170 <__multiply+0x7c>
 800523c:	3e01      	subs	r6, #1
 800523e:	e79b      	b.n	8005178 <__multiply+0x84>
 8005240:	080061b4 	.word	0x080061b4
 8005244:	080061c5 	.word	0x080061c5

08005248 <__pow5mult>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	4615      	mov	r5, r2
 800524e:	f012 0203 	ands.w	r2, r2, #3
 8005252:	4606      	mov	r6, r0
 8005254:	460f      	mov	r7, r1
 8005256:	d007      	beq.n	8005268 <__pow5mult+0x20>
 8005258:	4c25      	ldr	r4, [pc, #148]	; (80052f0 <__pow5mult+0xa8>)
 800525a:	3a01      	subs	r2, #1
 800525c:	2300      	movs	r3, #0
 800525e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005262:	f7ff fe9d 	bl	8004fa0 <__multadd>
 8005266:	4607      	mov	r7, r0
 8005268:	10ad      	asrs	r5, r5, #2
 800526a:	d03d      	beq.n	80052e8 <__pow5mult+0xa0>
 800526c:	69f4      	ldr	r4, [r6, #28]
 800526e:	b97c      	cbnz	r4, 8005290 <__pow5mult+0x48>
 8005270:	2010      	movs	r0, #16
 8005272:	f7ff fd7f 	bl	8004d74 <malloc>
 8005276:	4602      	mov	r2, r0
 8005278:	61f0      	str	r0, [r6, #28]
 800527a:	b928      	cbnz	r0, 8005288 <__pow5mult+0x40>
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <__pow5mult+0xac>)
 800527e:	481e      	ldr	r0, [pc, #120]	; (80052f8 <__pow5mult+0xb0>)
 8005280:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005284:	f000 fbe4 	bl	8005a50 <__assert_func>
 8005288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800528c:	6004      	str	r4, [r0, #0]
 800528e:	60c4      	str	r4, [r0, #12]
 8005290:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005298:	b94c      	cbnz	r4, 80052ae <__pow5mult+0x66>
 800529a:	f240 2171 	movw	r1, #625	; 0x271
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff ff12 	bl	80050c8 <__i2b>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80052aa:	4604      	mov	r4, r0
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	f04f 0900 	mov.w	r9, #0
 80052b2:	07eb      	lsls	r3, r5, #31
 80052b4:	d50a      	bpl.n	80052cc <__pow5mult+0x84>
 80052b6:	4639      	mov	r1, r7
 80052b8:	4622      	mov	r2, r4
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff ff1a 	bl	80050f4 <__multiply>
 80052c0:	4639      	mov	r1, r7
 80052c2:	4680      	mov	r8, r0
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff fe49 	bl	8004f5c <_Bfree>
 80052ca:	4647      	mov	r7, r8
 80052cc:	106d      	asrs	r5, r5, #1
 80052ce:	d00b      	beq.n	80052e8 <__pow5mult+0xa0>
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	b938      	cbnz	r0, 80052e4 <__pow5mult+0x9c>
 80052d4:	4622      	mov	r2, r4
 80052d6:	4621      	mov	r1, r4
 80052d8:	4630      	mov	r0, r6
 80052da:	f7ff ff0b 	bl	80050f4 <__multiply>
 80052de:	6020      	str	r0, [r4, #0]
 80052e0:	f8c0 9000 	str.w	r9, [r0]
 80052e4:	4604      	mov	r4, r0
 80052e6:	e7e4      	b.n	80052b2 <__pow5mult+0x6a>
 80052e8:	4638      	mov	r0, r7
 80052ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ee:	bf00      	nop
 80052f0:	08006310 	.word	0x08006310
 80052f4:	08006145 	.word	0x08006145
 80052f8:	080061c5 	.word	0x080061c5

080052fc <__lshift>:
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	460c      	mov	r4, r1
 8005302:	6849      	ldr	r1, [r1, #4]
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	4607      	mov	r7, r0
 800530e:	4691      	mov	r9, r2
 8005310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005314:	f108 0601 	add.w	r6, r8, #1
 8005318:	42b3      	cmp	r3, r6
 800531a:	db0b      	blt.n	8005334 <__lshift+0x38>
 800531c:	4638      	mov	r0, r7
 800531e:	f7ff fddd 	bl	8004edc <_Balloc>
 8005322:	4605      	mov	r5, r0
 8005324:	b948      	cbnz	r0, 800533a <__lshift+0x3e>
 8005326:	4602      	mov	r2, r0
 8005328:	4b28      	ldr	r3, [pc, #160]	; (80053cc <__lshift+0xd0>)
 800532a:	4829      	ldr	r0, [pc, #164]	; (80053d0 <__lshift+0xd4>)
 800532c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005330:	f000 fb8e 	bl	8005a50 <__assert_func>
 8005334:	3101      	adds	r1, #1
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	e7ee      	b.n	8005318 <__lshift+0x1c>
 800533a:	2300      	movs	r3, #0
 800533c:	f100 0114 	add.w	r1, r0, #20
 8005340:	f100 0210 	add.w	r2, r0, #16
 8005344:	4618      	mov	r0, r3
 8005346:	4553      	cmp	r3, sl
 8005348:	db33      	blt.n	80053b2 <__lshift+0xb6>
 800534a:	6920      	ldr	r0, [r4, #16]
 800534c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005350:	f104 0314 	add.w	r3, r4, #20
 8005354:	f019 091f 	ands.w	r9, r9, #31
 8005358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800535c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005360:	d02b      	beq.n	80053ba <__lshift+0xbe>
 8005362:	f1c9 0e20 	rsb	lr, r9, #32
 8005366:	468a      	mov	sl, r1
 8005368:	2200      	movs	r2, #0
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	fa00 f009 	lsl.w	r0, r0, r9
 8005370:	4310      	orrs	r0, r2
 8005372:	f84a 0b04 	str.w	r0, [sl], #4
 8005376:	f853 2b04 	ldr.w	r2, [r3], #4
 800537a:	459c      	cmp	ip, r3
 800537c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005380:	d8f3      	bhi.n	800536a <__lshift+0x6e>
 8005382:	ebac 0304 	sub.w	r3, ip, r4
 8005386:	3b15      	subs	r3, #21
 8005388:	f023 0303 	bic.w	r3, r3, #3
 800538c:	3304      	adds	r3, #4
 800538e:	f104 0015 	add.w	r0, r4, #21
 8005392:	4584      	cmp	ip, r0
 8005394:	bf38      	it	cc
 8005396:	2304      	movcc	r3, #4
 8005398:	50ca      	str	r2, [r1, r3]
 800539a:	b10a      	cbz	r2, 80053a0 <__lshift+0xa4>
 800539c:	f108 0602 	add.w	r6, r8, #2
 80053a0:	3e01      	subs	r6, #1
 80053a2:	4638      	mov	r0, r7
 80053a4:	612e      	str	r6, [r5, #16]
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7ff fdd8 	bl	8004f5c <_Bfree>
 80053ac:	4628      	mov	r0, r5
 80053ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053b6:	3301      	adds	r3, #1
 80053b8:	e7c5      	b.n	8005346 <__lshift+0x4a>
 80053ba:	3904      	subs	r1, #4
 80053bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80053c4:	459c      	cmp	ip, r3
 80053c6:	d8f9      	bhi.n	80053bc <__lshift+0xc0>
 80053c8:	e7ea      	b.n	80053a0 <__lshift+0xa4>
 80053ca:	bf00      	nop
 80053cc:	080061b4 	.word	0x080061b4
 80053d0:	080061c5 	.word	0x080061c5

080053d4 <__mcmp>:
 80053d4:	b530      	push	{r4, r5, lr}
 80053d6:	6902      	ldr	r2, [r0, #16]
 80053d8:	690c      	ldr	r4, [r1, #16]
 80053da:	1b12      	subs	r2, r2, r4
 80053dc:	d10e      	bne.n	80053fc <__mcmp+0x28>
 80053de:	f100 0314 	add.w	r3, r0, #20
 80053e2:	3114      	adds	r1, #20
 80053e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80053e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80053ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80053f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80053f4:	42a5      	cmp	r5, r4
 80053f6:	d003      	beq.n	8005400 <__mcmp+0x2c>
 80053f8:	d305      	bcc.n	8005406 <__mcmp+0x32>
 80053fa:	2201      	movs	r2, #1
 80053fc:	4610      	mov	r0, r2
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	4283      	cmp	r3, r0
 8005402:	d3f3      	bcc.n	80053ec <__mcmp+0x18>
 8005404:	e7fa      	b.n	80053fc <__mcmp+0x28>
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	e7f7      	b.n	80053fc <__mcmp+0x28>

0800540c <__mdiff>:
 800540c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	460c      	mov	r4, r1
 8005412:	4606      	mov	r6, r0
 8005414:	4611      	mov	r1, r2
 8005416:	4620      	mov	r0, r4
 8005418:	4690      	mov	r8, r2
 800541a:	f7ff ffdb 	bl	80053d4 <__mcmp>
 800541e:	1e05      	subs	r5, r0, #0
 8005420:	d110      	bne.n	8005444 <__mdiff+0x38>
 8005422:	4629      	mov	r1, r5
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff fd59 	bl	8004edc <_Balloc>
 800542a:	b930      	cbnz	r0, 800543a <__mdiff+0x2e>
 800542c:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <__mdiff+0x10c>)
 800542e:	4602      	mov	r2, r0
 8005430:	f240 2137 	movw	r1, #567	; 0x237
 8005434:	4839      	ldr	r0, [pc, #228]	; (800551c <__mdiff+0x110>)
 8005436:	f000 fb0b 	bl	8005a50 <__assert_func>
 800543a:	2301      	movs	r3, #1
 800543c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	bfa4      	itt	ge
 8005446:	4643      	movge	r3, r8
 8005448:	46a0      	movge	r8, r4
 800544a:	4630      	mov	r0, r6
 800544c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005450:	bfa6      	itte	ge
 8005452:	461c      	movge	r4, r3
 8005454:	2500      	movge	r5, #0
 8005456:	2501      	movlt	r5, #1
 8005458:	f7ff fd40 	bl	8004edc <_Balloc>
 800545c:	b920      	cbnz	r0, 8005468 <__mdiff+0x5c>
 800545e:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <__mdiff+0x10c>)
 8005460:	4602      	mov	r2, r0
 8005462:	f240 2145 	movw	r1, #581	; 0x245
 8005466:	e7e5      	b.n	8005434 <__mdiff+0x28>
 8005468:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800546c:	6926      	ldr	r6, [r4, #16]
 800546e:	60c5      	str	r5, [r0, #12]
 8005470:	f104 0914 	add.w	r9, r4, #20
 8005474:	f108 0514 	add.w	r5, r8, #20
 8005478:	f100 0e14 	add.w	lr, r0, #20
 800547c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005480:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005484:	f108 0210 	add.w	r2, r8, #16
 8005488:	46f2      	mov	sl, lr
 800548a:	2100      	movs	r1, #0
 800548c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005494:	fa11 f88b 	uxtah	r8, r1, fp
 8005498:	b299      	uxth	r1, r3
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	eba8 0801 	sub.w	r8, r8, r1
 80054a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054a8:	fa1f f888 	uxth.w	r8, r8
 80054ac:	1419      	asrs	r1, r3, #16
 80054ae:	454e      	cmp	r6, r9
 80054b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054b4:	f84a 3b04 	str.w	r3, [sl], #4
 80054b8:	d8e8      	bhi.n	800548c <__mdiff+0x80>
 80054ba:	1b33      	subs	r3, r6, r4
 80054bc:	3b15      	subs	r3, #21
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	3304      	adds	r3, #4
 80054c4:	3415      	adds	r4, #21
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	bf38      	it	cc
 80054ca:	2304      	movcc	r3, #4
 80054cc:	441d      	add	r5, r3
 80054ce:	4473      	add	r3, lr
 80054d0:	469e      	mov	lr, r3
 80054d2:	462e      	mov	r6, r5
 80054d4:	4566      	cmp	r6, ip
 80054d6:	d30e      	bcc.n	80054f6 <__mdiff+0xea>
 80054d8:	f10c 0203 	add.w	r2, ip, #3
 80054dc:	1b52      	subs	r2, r2, r5
 80054de:	f022 0203 	bic.w	r2, r2, #3
 80054e2:	3d03      	subs	r5, #3
 80054e4:	45ac      	cmp	ip, r5
 80054e6:	bf38      	it	cc
 80054e8:	2200      	movcc	r2, #0
 80054ea:	4413      	add	r3, r2
 80054ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80054f0:	b17a      	cbz	r2, 8005512 <__mdiff+0x106>
 80054f2:	6107      	str	r7, [r0, #16]
 80054f4:	e7a4      	b.n	8005440 <__mdiff+0x34>
 80054f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80054fa:	fa11 f288 	uxtah	r2, r1, r8
 80054fe:	1414      	asrs	r4, r2, #16
 8005500:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005504:	b292      	uxth	r2, r2
 8005506:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800550a:	f84e 2b04 	str.w	r2, [lr], #4
 800550e:	1421      	asrs	r1, r4, #16
 8005510:	e7e0      	b.n	80054d4 <__mdiff+0xc8>
 8005512:	3f01      	subs	r7, #1
 8005514:	e7ea      	b.n	80054ec <__mdiff+0xe0>
 8005516:	bf00      	nop
 8005518:	080061b4 	.word	0x080061b4
 800551c:	080061c5 	.word	0x080061c5

08005520 <__d2b>:
 8005520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005524:	460f      	mov	r7, r1
 8005526:	2101      	movs	r1, #1
 8005528:	ec59 8b10 	vmov	r8, r9, d0
 800552c:	4616      	mov	r6, r2
 800552e:	f7ff fcd5 	bl	8004edc <_Balloc>
 8005532:	4604      	mov	r4, r0
 8005534:	b930      	cbnz	r0, 8005544 <__d2b+0x24>
 8005536:	4602      	mov	r2, r0
 8005538:	4b24      	ldr	r3, [pc, #144]	; (80055cc <__d2b+0xac>)
 800553a:	4825      	ldr	r0, [pc, #148]	; (80055d0 <__d2b+0xb0>)
 800553c:	f240 310f 	movw	r1, #783	; 0x30f
 8005540:	f000 fa86 	bl	8005a50 <__assert_func>
 8005544:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800554c:	bb2d      	cbnz	r5, 800559a <__d2b+0x7a>
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	f1b8 0300 	subs.w	r3, r8, #0
 8005554:	d026      	beq.n	80055a4 <__d2b+0x84>
 8005556:	4668      	mov	r0, sp
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	f7ff fd87 	bl	800506c <__lo0bits>
 800555e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005562:	b1e8      	cbz	r0, 80055a0 <__d2b+0x80>
 8005564:	f1c0 0320 	rsb	r3, r0, #32
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	430b      	orrs	r3, r1
 800556e:	40c2      	lsrs	r2, r0
 8005570:	6163      	str	r3, [r4, #20]
 8005572:	9201      	str	r2, [sp, #4]
 8005574:	9b01      	ldr	r3, [sp, #4]
 8005576:	61a3      	str	r3, [r4, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2202      	movne	r2, #2
 800557e:	2201      	moveq	r2, #1
 8005580:	6122      	str	r2, [r4, #16]
 8005582:	b1bd      	cbz	r5, 80055b4 <__d2b+0x94>
 8005584:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005588:	4405      	add	r5, r0
 800558a:	603d      	str	r5, [r7, #0]
 800558c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005590:	6030      	str	r0, [r6, #0]
 8005592:	4620      	mov	r0, r4
 8005594:	b003      	add	sp, #12
 8005596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800559a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559e:	e7d6      	b.n	800554e <__d2b+0x2e>
 80055a0:	6161      	str	r1, [r4, #20]
 80055a2:	e7e7      	b.n	8005574 <__d2b+0x54>
 80055a4:	a801      	add	r0, sp, #4
 80055a6:	f7ff fd61 	bl	800506c <__lo0bits>
 80055aa:	9b01      	ldr	r3, [sp, #4]
 80055ac:	6163      	str	r3, [r4, #20]
 80055ae:	3020      	adds	r0, #32
 80055b0:	2201      	movs	r2, #1
 80055b2:	e7e5      	b.n	8005580 <__d2b+0x60>
 80055b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055bc:	6038      	str	r0, [r7, #0]
 80055be:	6918      	ldr	r0, [r3, #16]
 80055c0:	f7ff fd34 	bl	800502c <__hi0bits>
 80055c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055c8:	e7e2      	b.n	8005590 <__d2b+0x70>
 80055ca:	bf00      	nop
 80055cc:	080061b4 	.word	0x080061b4
 80055d0:	080061c5 	.word	0x080061c5

080055d4 <__ssputs_r>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	688e      	ldr	r6, [r1, #8]
 80055da:	461f      	mov	r7, r3
 80055dc:	42be      	cmp	r6, r7
 80055de:	680b      	ldr	r3, [r1, #0]
 80055e0:	4682      	mov	sl, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4690      	mov	r8, r2
 80055e6:	d82c      	bhi.n	8005642 <__ssputs_r+0x6e>
 80055e8:	898a      	ldrh	r2, [r1, #12]
 80055ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055ee:	d026      	beq.n	800563e <__ssputs_r+0x6a>
 80055f0:	6965      	ldr	r5, [r4, #20]
 80055f2:	6909      	ldr	r1, [r1, #16]
 80055f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055f8:	eba3 0901 	sub.w	r9, r3, r1
 80055fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005600:	1c7b      	adds	r3, r7, #1
 8005602:	444b      	add	r3, r9
 8005604:	106d      	asrs	r5, r5, #1
 8005606:	429d      	cmp	r5, r3
 8005608:	bf38      	it	cc
 800560a:	461d      	movcc	r5, r3
 800560c:	0553      	lsls	r3, r2, #21
 800560e:	d527      	bpl.n	8005660 <__ssputs_r+0x8c>
 8005610:	4629      	mov	r1, r5
 8005612:	f7ff fbd7 	bl	8004dc4 <_malloc_r>
 8005616:	4606      	mov	r6, r0
 8005618:	b360      	cbz	r0, 8005674 <__ssputs_r+0xa0>
 800561a:	6921      	ldr	r1, [r4, #16]
 800561c:	464a      	mov	r2, r9
 800561e:	f000 fa09 	bl	8005a34 <memcpy>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	6126      	str	r6, [r4, #16]
 8005630:	6165      	str	r5, [r4, #20]
 8005632:	444e      	add	r6, r9
 8005634:	eba5 0509 	sub.w	r5, r5, r9
 8005638:	6026      	str	r6, [r4, #0]
 800563a:	60a5      	str	r5, [r4, #8]
 800563c:	463e      	mov	r6, r7
 800563e:	42be      	cmp	r6, r7
 8005640:	d900      	bls.n	8005644 <__ssputs_r+0x70>
 8005642:	463e      	mov	r6, r7
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	4632      	mov	r2, r6
 8005648:	4641      	mov	r1, r8
 800564a:	f000 f9c9 	bl	80059e0 <memmove>
 800564e:	68a3      	ldr	r3, [r4, #8]
 8005650:	1b9b      	subs	r3, r3, r6
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	4433      	add	r3, r6
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	2000      	movs	r0, #0
 800565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005660:	462a      	mov	r2, r5
 8005662:	f000 fa3b 	bl	8005adc <_realloc_r>
 8005666:	4606      	mov	r6, r0
 8005668:	2800      	cmp	r0, #0
 800566a:	d1e0      	bne.n	800562e <__ssputs_r+0x5a>
 800566c:	6921      	ldr	r1, [r4, #16]
 800566e:	4650      	mov	r0, sl
 8005670:	f7ff fb34 	bl	8004cdc <_free_r>
 8005674:	230c      	movs	r3, #12
 8005676:	f8ca 3000 	str.w	r3, [sl]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	f04f 30ff 	mov.w	r0, #4294967295
 8005686:	e7e9      	b.n	800565c <__ssputs_r+0x88>

08005688 <_svfiprintf_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	4698      	mov	r8, r3
 800568e:	898b      	ldrh	r3, [r1, #12]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	b09d      	sub	sp, #116	; 0x74
 8005694:	4607      	mov	r7, r0
 8005696:	460d      	mov	r5, r1
 8005698:	4614      	mov	r4, r2
 800569a:	d50e      	bpl.n	80056ba <_svfiprintf_r+0x32>
 800569c:	690b      	ldr	r3, [r1, #16]
 800569e:	b963      	cbnz	r3, 80056ba <_svfiprintf_r+0x32>
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	f7ff fb8f 	bl	8004dc4 <_malloc_r>
 80056a6:	6028      	str	r0, [r5, #0]
 80056a8:	6128      	str	r0, [r5, #16]
 80056aa:	b920      	cbnz	r0, 80056b6 <_svfiprintf_r+0x2e>
 80056ac:	230c      	movs	r3, #12
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e0d0      	b.n	8005858 <_svfiprintf_r+0x1d0>
 80056b6:	2340      	movs	r3, #64	; 0x40
 80056b8:	616b      	str	r3, [r5, #20]
 80056ba:	2300      	movs	r3, #0
 80056bc:	9309      	str	r3, [sp, #36]	; 0x24
 80056be:	2320      	movs	r3, #32
 80056c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056c8:	2330      	movs	r3, #48	; 0x30
 80056ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005870 <_svfiprintf_r+0x1e8>
 80056ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056d2:	f04f 0901 	mov.w	r9, #1
 80056d6:	4623      	mov	r3, r4
 80056d8:	469a      	mov	sl, r3
 80056da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056de:	b10a      	cbz	r2, 80056e4 <_svfiprintf_r+0x5c>
 80056e0:	2a25      	cmp	r2, #37	; 0x25
 80056e2:	d1f9      	bne.n	80056d8 <_svfiprintf_r+0x50>
 80056e4:	ebba 0b04 	subs.w	fp, sl, r4
 80056e8:	d00b      	beq.n	8005702 <_svfiprintf_r+0x7a>
 80056ea:	465b      	mov	r3, fp
 80056ec:	4622      	mov	r2, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ff6f 	bl	80055d4 <__ssputs_r>
 80056f6:	3001      	adds	r0, #1
 80056f8:	f000 80a9 	beq.w	800584e <_svfiprintf_r+0x1c6>
 80056fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056fe:	445a      	add	r2, fp
 8005700:	9209      	str	r2, [sp, #36]	; 0x24
 8005702:	f89a 3000 	ldrb.w	r3, [sl]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80a1 	beq.w	800584e <_svfiprintf_r+0x1c6>
 800570c:	2300      	movs	r3, #0
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005716:	f10a 0a01 	add.w	sl, sl, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	9307      	str	r3, [sp, #28]
 800571e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005722:	931a      	str	r3, [sp, #104]	; 0x68
 8005724:	4654      	mov	r4, sl
 8005726:	2205      	movs	r2, #5
 8005728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800572c:	4850      	ldr	r0, [pc, #320]	; (8005870 <_svfiprintf_r+0x1e8>)
 800572e:	f7fa fd57 	bl	80001e0 <memchr>
 8005732:	9a04      	ldr	r2, [sp, #16]
 8005734:	b9d8      	cbnz	r0, 800576e <_svfiprintf_r+0xe6>
 8005736:	06d0      	lsls	r0, r2, #27
 8005738:	bf44      	itt	mi
 800573a:	2320      	movmi	r3, #32
 800573c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005740:	0711      	lsls	r1, r2, #28
 8005742:	bf44      	itt	mi
 8005744:	232b      	movmi	r3, #43	; 0x2b
 8005746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574a:	f89a 3000 	ldrb.w	r3, [sl]
 800574e:	2b2a      	cmp	r3, #42	; 0x2a
 8005750:	d015      	beq.n	800577e <_svfiprintf_r+0xf6>
 8005752:	9a07      	ldr	r2, [sp, #28]
 8005754:	4654      	mov	r4, sl
 8005756:	2000      	movs	r0, #0
 8005758:	f04f 0c0a 	mov.w	ip, #10
 800575c:	4621      	mov	r1, r4
 800575e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005762:	3b30      	subs	r3, #48	; 0x30
 8005764:	2b09      	cmp	r3, #9
 8005766:	d94d      	bls.n	8005804 <_svfiprintf_r+0x17c>
 8005768:	b1b0      	cbz	r0, 8005798 <_svfiprintf_r+0x110>
 800576a:	9207      	str	r2, [sp, #28]
 800576c:	e014      	b.n	8005798 <_svfiprintf_r+0x110>
 800576e:	eba0 0308 	sub.w	r3, r0, r8
 8005772:	fa09 f303 	lsl.w	r3, r9, r3
 8005776:	4313      	orrs	r3, r2
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	46a2      	mov	sl, r4
 800577c:	e7d2      	b.n	8005724 <_svfiprintf_r+0x9c>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	9103      	str	r1, [sp, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfbb      	ittet	lt
 800578a:	425b      	neglt	r3, r3
 800578c:	f042 0202 	orrlt.w	r2, r2, #2
 8005790:	9307      	strge	r3, [sp, #28]
 8005792:	9307      	strlt	r3, [sp, #28]
 8005794:	bfb8      	it	lt
 8005796:	9204      	strlt	r2, [sp, #16]
 8005798:	7823      	ldrb	r3, [r4, #0]
 800579a:	2b2e      	cmp	r3, #46	; 0x2e
 800579c:	d10c      	bne.n	80057b8 <_svfiprintf_r+0x130>
 800579e:	7863      	ldrb	r3, [r4, #1]
 80057a0:	2b2a      	cmp	r3, #42	; 0x2a
 80057a2:	d134      	bne.n	800580e <_svfiprintf_r+0x186>
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	9203      	str	r2, [sp, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfb8      	it	lt
 80057b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057b4:	3402      	adds	r4, #2
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005880 <_svfiprintf_r+0x1f8>
 80057bc:	7821      	ldrb	r1, [r4, #0]
 80057be:	2203      	movs	r2, #3
 80057c0:	4650      	mov	r0, sl
 80057c2:	f7fa fd0d 	bl	80001e0 <memchr>
 80057c6:	b138      	cbz	r0, 80057d8 <_svfiprintf_r+0x150>
 80057c8:	9b04      	ldr	r3, [sp, #16]
 80057ca:	eba0 000a 	sub.w	r0, r0, sl
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	4082      	lsls	r2, r0
 80057d2:	4313      	orrs	r3, r2
 80057d4:	3401      	adds	r4, #1
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057dc:	4825      	ldr	r0, [pc, #148]	; (8005874 <_svfiprintf_r+0x1ec>)
 80057de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057e2:	2206      	movs	r2, #6
 80057e4:	f7fa fcfc 	bl	80001e0 <memchr>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d038      	beq.n	800585e <_svfiprintf_r+0x1d6>
 80057ec:	4b22      	ldr	r3, [pc, #136]	; (8005878 <_svfiprintf_r+0x1f0>)
 80057ee:	bb1b      	cbnz	r3, 8005838 <_svfiprintf_r+0x1b0>
 80057f0:	9b03      	ldr	r3, [sp, #12]
 80057f2:	3307      	adds	r3, #7
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	3308      	adds	r3, #8
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fe:	4433      	add	r3, r6
 8005800:	9309      	str	r3, [sp, #36]	; 0x24
 8005802:	e768      	b.n	80056d6 <_svfiprintf_r+0x4e>
 8005804:	fb0c 3202 	mla	r2, ip, r2, r3
 8005808:	460c      	mov	r4, r1
 800580a:	2001      	movs	r0, #1
 800580c:	e7a6      	b.n	800575c <_svfiprintf_r+0xd4>
 800580e:	2300      	movs	r3, #0
 8005810:	3401      	adds	r4, #1
 8005812:	9305      	str	r3, [sp, #20]
 8005814:	4619      	mov	r1, r3
 8005816:	f04f 0c0a 	mov.w	ip, #10
 800581a:	4620      	mov	r0, r4
 800581c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005820:	3a30      	subs	r2, #48	; 0x30
 8005822:	2a09      	cmp	r2, #9
 8005824:	d903      	bls.n	800582e <_svfiprintf_r+0x1a6>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0c6      	beq.n	80057b8 <_svfiprintf_r+0x130>
 800582a:	9105      	str	r1, [sp, #20]
 800582c:	e7c4      	b.n	80057b8 <_svfiprintf_r+0x130>
 800582e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005832:	4604      	mov	r4, r0
 8005834:	2301      	movs	r3, #1
 8005836:	e7f0      	b.n	800581a <_svfiprintf_r+0x192>
 8005838:	ab03      	add	r3, sp, #12
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	462a      	mov	r2, r5
 800583e:	4b0f      	ldr	r3, [pc, #60]	; (800587c <_svfiprintf_r+0x1f4>)
 8005840:	a904      	add	r1, sp, #16
 8005842:	4638      	mov	r0, r7
 8005844:	f7fd fe62 	bl	800350c <_printf_float>
 8005848:	1c42      	adds	r2, r0, #1
 800584a:	4606      	mov	r6, r0
 800584c:	d1d6      	bne.n	80057fc <_svfiprintf_r+0x174>
 800584e:	89ab      	ldrh	r3, [r5, #12]
 8005850:	065b      	lsls	r3, r3, #25
 8005852:	f53f af2d 	bmi.w	80056b0 <_svfiprintf_r+0x28>
 8005856:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005858:	b01d      	add	sp, #116	; 0x74
 800585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585e:	ab03      	add	r3, sp, #12
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	462a      	mov	r2, r5
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <_svfiprintf_r+0x1f4>)
 8005866:	a904      	add	r1, sp, #16
 8005868:	4638      	mov	r0, r7
 800586a:	f7fe f8f3 	bl	8003a54 <_printf_i>
 800586e:	e7eb      	b.n	8005848 <_svfiprintf_r+0x1c0>
 8005870:	0800631c 	.word	0x0800631c
 8005874:	08006326 	.word	0x08006326
 8005878:	0800350d 	.word	0x0800350d
 800587c:	080055d5 	.word	0x080055d5
 8005880:	08006322 	.word	0x08006322

08005884 <__sflush_r>:
 8005884:	898a      	ldrh	r2, [r1, #12]
 8005886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	0710      	lsls	r0, r2, #28
 800588e:	460c      	mov	r4, r1
 8005890:	d458      	bmi.n	8005944 <__sflush_r+0xc0>
 8005892:	684b      	ldr	r3, [r1, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	dc05      	bgt.n	80058a4 <__sflush_r+0x20>
 8005898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	dc02      	bgt.n	80058a4 <__sflush_r+0x20>
 800589e:	2000      	movs	r0, #0
 80058a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d0f9      	beq.n	800589e <__sflush_r+0x1a>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058b0:	682f      	ldr	r7, [r5, #0]
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	d032      	beq.n	800591e <__sflush_r+0x9a>
 80058b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	075a      	lsls	r2, r3, #29
 80058be:	d505      	bpl.n	80058cc <__sflush_r+0x48>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	1ac0      	subs	r0, r0, r3
 80058c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058c6:	b10b      	cbz	r3, 80058cc <__sflush_r+0x48>
 80058c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ca:	1ac0      	subs	r0, r0, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	4602      	mov	r2, r0
 80058d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058d2:	6a21      	ldr	r1, [r4, #32]
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b0      	blx	r6
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	d106      	bne.n	80058ec <__sflush_r+0x68>
 80058de:	6829      	ldr	r1, [r5, #0]
 80058e0:	291d      	cmp	r1, #29
 80058e2:	d82b      	bhi.n	800593c <__sflush_r+0xb8>
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <__sflush_r+0x108>)
 80058e6:	410a      	asrs	r2, r1
 80058e8:	07d6      	lsls	r6, r2, #31
 80058ea:	d427      	bmi.n	800593c <__sflush_r+0xb8>
 80058ec:	2200      	movs	r2, #0
 80058ee:	6062      	str	r2, [r4, #4]
 80058f0:	04d9      	lsls	r1, r3, #19
 80058f2:	6922      	ldr	r2, [r4, #16]
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	d504      	bpl.n	8005902 <__sflush_r+0x7e>
 80058f8:	1c42      	adds	r2, r0, #1
 80058fa:	d101      	bne.n	8005900 <__sflush_r+0x7c>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b903      	cbnz	r3, 8005902 <__sflush_r+0x7e>
 8005900:	6560      	str	r0, [r4, #84]	; 0x54
 8005902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005904:	602f      	str	r7, [r5, #0]
 8005906:	2900      	cmp	r1, #0
 8005908:	d0c9      	beq.n	800589e <__sflush_r+0x1a>
 800590a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800590e:	4299      	cmp	r1, r3
 8005910:	d002      	beq.n	8005918 <__sflush_r+0x94>
 8005912:	4628      	mov	r0, r5
 8005914:	f7ff f9e2 	bl	8004cdc <_free_r>
 8005918:	2000      	movs	r0, #0
 800591a:	6360      	str	r0, [r4, #52]	; 0x34
 800591c:	e7c0      	b.n	80058a0 <__sflush_r+0x1c>
 800591e:	2301      	movs	r3, #1
 8005920:	4628      	mov	r0, r5
 8005922:	47b0      	blx	r6
 8005924:	1c41      	adds	r1, r0, #1
 8005926:	d1c8      	bne.n	80058ba <__sflush_r+0x36>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0c5      	beq.n	80058ba <__sflush_r+0x36>
 800592e:	2b1d      	cmp	r3, #29
 8005930:	d001      	beq.n	8005936 <__sflush_r+0xb2>
 8005932:	2b16      	cmp	r3, #22
 8005934:	d101      	bne.n	800593a <__sflush_r+0xb6>
 8005936:	602f      	str	r7, [r5, #0]
 8005938:	e7b1      	b.n	800589e <__sflush_r+0x1a>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	e7ad      	b.n	80058a0 <__sflush_r+0x1c>
 8005944:	690f      	ldr	r7, [r1, #16]
 8005946:	2f00      	cmp	r7, #0
 8005948:	d0a9      	beq.n	800589e <__sflush_r+0x1a>
 800594a:	0793      	lsls	r3, r2, #30
 800594c:	680e      	ldr	r6, [r1, #0]
 800594e:	bf08      	it	eq
 8005950:	694b      	ldreq	r3, [r1, #20]
 8005952:	600f      	str	r7, [r1, #0]
 8005954:	bf18      	it	ne
 8005956:	2300      	movne	r3, #0
 8005958:	eba6 0807 	sub.w	r8, r6, r7
 800595c:	608b      	str	r3, [r1, #8]
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	dd9c      	ble.n	800589e <__sflush_r+0x1a>
 8005964:	6a21      	ldr	r1, [r4, #32]
 8005966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005968:	4643      	mov	r3, r8
 800596a:	463a      	mov	r2, r7
 800596c:	4628      	mov	r0, r5
 800596e:	47b0      	blx	r6
 8005970:	2800      	cmp	r0, #0
 8005972:	dc06      	bgt.n	8005982 <__sflush_r+0xfe>
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e78e      	b.n	80058a0 <__sflush_r+0x1c>
 8005982:	4407      	add	r7, r0
 8005984:	eba8 0800 	sub.w	r8, r8, r0
 8005988:	e7e9      	b.n	800595e <__sflush_r+0xda>
 800598a:	bf00      	nop
 800598c:	dfbffffe 	.word	0xdfbffffe

08005990 <_fflush_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	4605      	mov	r5, r0
 8005996:	460c      	mov	r4, r1
 8005998:	b913      	cbnz	r3, 80059a0 <_fflush_r+0x10>
 800599a:	2500      	movs	r5, #0
 800599c:	4628      	mov	r0, r5
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	b118      	cbz	r0, 80059aa <_fflush_r+0x1a>
 80059a2:	6a03      	ldr	r3, [r0, #32]
 80059a4:	b90b      	cbnz	r3, 80059aa <_fflush_r+0x1a>
 80059a6:	f7fe fa03 	bl	8003db0 <__sinit>
 80059aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f3      	beq.n	800599a <_fflush_r+0xa>
 80059b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059b4:	07d0      	lsls	r0, r2, #31
 80059b6:	d404      	bmi.n	80059c2 <_fflush_r+0x32>
 80059b8:	0599      	lsls	r1, r3, #22
 80059ba:	d402      	bmi.n	80059c2 <_fflush_r+0x32>
 80059bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059be:	f7fe fb0e 	bl	8003fde <__retarget_lock_acquire_recursive>
 80059c2:	4628      	mov	r0, r5
 80059c4:	4621      	mov	r1, r4
 80059c6:	f7ff ff5d 	bl	8005884 <__sflush_r>
 80059ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059cc:	07da      	lsls	r2, r3, #31
 80059ce:	4605      	mov	r5, r0
 80059d0:	d4e4      	bmi.n	800599c <_fflush_r+0xc>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	d4e1      	bmi.n	800599c <_fflush_r+0xc>
 80059d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059da:	f7fe fb01 	bl	8003fe0 <__retarget_lock_release_recursive>
 80059de:	e7dd      	b.n	800599c <_fflush_r+0xc>

080059e0 <memmove>:
 80059e0:	4288      	cmp	r0, r1
 80059e2:	b510      	push	{r4, lr}
 80059e4:	eb01 0402 	add.w	r4, r1, r2
 80059e8:	d902      	bls.n	80059f0 <memmove+0x10>
 80059ea:	4284      	cmp	r4, r0
 80059ec:	4623      	mov	r3, r4
 80059ee:	d807      	bhi.n	8005a00 <memmove+0x20>
 80059f0:	1e43      	subs	r3, r0, #1
 80059f2:	42a1      	cmp	r1, r4
 80059f4:	d008      	beq.n	8005a08 <memmove+0x28>
 80059f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059fe:	e7f8      	b.n	80059f2 <memmove+0x12>
 8005a00:	4402      	add	r2, r0
 8005a02:	4601      	mov	r1, r0
 8005a04:	428a      	cmp	r2, r1
 8005a06:	d100      	bne.n	8005a0a <memmove+0x2a>
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a12:	e7f7      	b.n	8005a04 <memmove+0x24>

08005a14 <_sbrk_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_sbrk_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fb fd14 	bl	800144c <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_sbrk_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_sbrk_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	2000041c 	.word	0x2000041c

08005a34 <memcpy>:
 8005a34:	440a      	add	r2, r1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a3c:	d100      	bne.n	8005a40 <memcpy+0xc>
 8005a3e:	4770      	bx	lr
 8005a40:	b510      	push	{r4, lr}
 8005a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d1f9      	bne.n	8005a42 <memcpy+0xe>
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <__assert_func>:
 8005a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a52:	4614      	mov	r4, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <__assert_func+0x2c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	68d8      	ldr	r0, [r3, #12]
 8005a5e:	b14c      	cbz	r4, 8005a74 <__assert_func+0x24>
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <__assert_func+0x30>)
 8005a62:	9100      	str	r1, [sp, #0]
 8005a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a68:	4906      	ldr	r1, [pc, #24]	; (8005a84 <__assert_func+0x34>)
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	f000 f872 	bl	8005b54 <fiprintf>
 8005a70:	f000 f882 	bl	8005b78 <abort>
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__assert_func+0x38>)
 8005a76:	461c      	mov	r4, r3
 8005a78:	e7f3      	b.n	8005a62 <__assert_func+0x12>
 8005a7a:	bf00      	nop
 8005a7c:	20000068 	.word	0x20000068
 8005a80:	08006337 	.word	0x08006337
 8005a84:	08006344 	.word	0x08006344
 8005a88:	08006372 	.word	0x08006372

08005a8c <_calloc_r>:
 8005a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a8e:	fba1 2402 	umull	r2, r4, r1, r2
 8005a92:	b94c      	cbnz	r4, 8005aa8 <_calloc_r+0x1c>
 8005a94:	4611      	mov	r1, r2
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	f7ff f994 	bl	8004dc4 <_malloc_r>
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b930      	cbnz	r0, 8005ab0 <_calloc_r+0x24>
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	b003      	add	sp, #12
 8005aa6:	bd30      	pop	{r4, r5, pc}
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	6002      	str	r2, [r0, #0]
 8005aac:	2500      	movs	r5, #0
 8005aae:	e7f8      	b.n	8005aa2 <_calloc_r+0x16>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	f7fe fa16 	bl	8003ee2 <memset>
 8005ab6:	e7f4      	b.n	8005aa2 <_calloc_r+0x16>

08005ab8 <__ascii_mbtowc>:
 8005ab8:	b082      	sub	sp, #8
 8005aba:	b901      	cbnz	r1, 8005abe <__ascii_mbtowc+0x6>
 8005abc:	a901      	add	r1, sp, #4
 8005abe:	b142      	cbz	r2, 8005ad2 <__ascii_mbtowc+0x1a>
 8005ac0:	b14b      	cbz	r3, 8005ad6 <__ascii_mbtowc+0x1e>
 8005ac2:	7813      	ldrb	r3, [r2, #0]
 8005ac4:	600b      	str	r3, [r1, #0]
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	1e10      	subs	r0, r2, #0
 8005aca:	bf18      	it	ne
 8005acc:	2001      	movne	r0, #1
 8005ace:	b002      	add	sp, #8
 8005ad0:	4770      	bx	lr
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	e7fb      	b.n	8005ace <__ascii_mbtowc+0x16>
 8005ad6:	f06f 0001 	mvn.w	r0, #1
 8005ada:	e7f8      	b.n	8005ace <__ascii_mbtowc+0x16>

08005adc <_realloc_r>:
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	b921      	cbnz	r1, 8005af2 <_realloc_r+0x16>
 8005ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4611      	mov	r1, r2
 8005aee:	f7ff b969 	b.w	8004dc4 <_malloc_r>
 8005af2:	b92a      	cbnz	r2, 8005b00 <_realloc_r+0x24>
 8005af4:	f7ff f8f2 	bl	8004cdc <_free_r>
 8005af8:	4625      	mov	r5, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b00:	f000 f841 	bl	8005b86 <_malloc_usable_size_r>
 8005b04:	4284      	cmp	r4, r0
 8005b06:	4607      	mov	r7, r0
 8005b08:	d802      	bhi.n	8005b10 <_realloc_r+0x34>
 8005b0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b0e:	d812      	bhi.n	8005b36 <_realloc_r+0x5a>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4640      	mov	r0, r8
 8005b14:	f7ff f956 	bl	8004dc4 <_malloc_r>
 8005b18:	4605      	mov	r5, r0
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d0ed      	beq.n	8005afa <_realloc_r+0x1e>
 8005b1e:	42bc      	cmp	r4, r7
 8005b20:	4622      	mov	r2, r4
 8005b22:	4631      	mov	r1, r6
 8005b24:	bf28      	it	cs
 8005b26:	463a      	movcs	r2, r7
 8005b28:	f7ff ff84 	bl	8005a34 <memcpy>
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff f8d4 	bl	8004cdc <_free_r>
 8005b34:	e7e1      	b.n	8005afa <_realloc_r+0x1e>
 8005b36:	4635      	mov	r5, r6
 8005b38:	e7df      	b.n	8005afa <_realloc_r+0x1e>

08005b3a <__ascii_wctomb>:
 8005b3a:	b149      	cbz	r1, 8005b50 <__ascii_wctomb+0x16>
 8005b3c:	2aff      	cmp	r2, #255	; 0xff
 8005b3e:	bf85      	ittet	hi
 8005b40:	238a      	movhi	r3, #138	; 0x8a
 8005b42:	6003      	strhi	r3, [r0, #0]
 8005b44:	700a      	strbls	r2, [r1, #0]
 8005b46:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b4a:	bf98      	it	ls
 8005b4c:	2001      	movls	r0, #1
 8005b4e:	4770      	bx	lr
 8005b50:	4608      	mov	r0, r1
 8005b52:	4770      	bx	lr

08005b54 <fiprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b503      	push	{r0, r1, lr}
 8005b58:	4601      	mov	r1, r0
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <fiprintf+0x20>)
 8005b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b62:	6800      	ldr	r0, [r0, #0]
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	f000 f83f 	bl	8005be8 <_vfiprintf_r>
 8005b6a:	b002      	add	sp, #8
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b70:	b003      	add	sp, #12
 8005b72:	4770      	bx	lr
 8005b74:	20000068 	.word	0x20000068

08005b78 <abort>:
 8005b78:	b508      	push	{r3, lr}
 8005b7a:	2006      	movs	r0, #6
 8005b7c:	f000 fa0c 	bl	8005f98 <raise>
 8005b80:	2001      	movs	r0, #1
 8005b82:	f7fb fbeb 	bl	800135c <_exit>

08005b86 <_malloc_usable_size_r>:
 8005b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8a:	1f18      	subs	r0, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfbc      	itt	lt
 8005b90:	580b      	ldrlt	r3, [r1, r0]
 8005b92:	18c0      	addlt	r0, r0, r3
 8005b94:	4770      	bx	lr

08005b96 <__sfputc_r>:
 8005b96:	6893      	ldr	r3, [r2, #8]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	b410      	push	{r4}
 8005b9e:	6093      	str	r3, [r2, #8]
 8005ba0:	da08      	bge.n	8005bb4 <__sfputc_r+0x1e>
 8005ba2:	6994      	ldr	r4, [r2, #24]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	db01      	blt.n	8005bac <__sfputc_r+0x16>
 8005ba8:	290a      	cmp	r1, #10
 8005baa:	d103      	bne.n	8005bb4 <__sfputc_r+0x1e>
 8005bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb0:	f000 b934 	b.w	8005e1c <__swbuf_r>
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	1c58      	adds	r0, r3, #1
 8005bb8:	6010      	str	r0, [r2, #0]
 8005bba:	7019      	strb	r1, [r3, #0]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <__sfputs_r>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	4614      	mov	r4, r2
 8005bcc:	18d5      	adds	r5, r2, r3
 8005bce:	42ac      	cmp	r4, r5
 8005bd0:	d101      	bne.n	8005bd6 <__sfputs_r+0x12>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e007      	b.n	8005be6 <__sfputs_r+0x22>
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	463a      	mov	r2, r7
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff ffda 	bl	8005b96 <__sfputc_r>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d1f3      	bne.n	8005bce <__sfputs_r+0xa>
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005be8 <_vfiprintf_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460d      	mov	r5, r1
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	b118      	cbz	r0, 8005c00 <_vfiprintf_r+0x18>
 8005bf8:	6a03      	ldr	r3, [r0, #32]
 8005bfa:	b90b      	cbnz	r3, 8005c00 <_vfiprintf_r+0x18>
 8005bfc:	f7fe f8d8 	bl	8003db0 <__sinit>
 8005c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7fe f9e6 	bl	8003fde <__retarget_lock_acquire_recursive>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	d501      	bpl.n	8005c1c <_vfiprintf_r+0x34>
 8005c18:	692b      	ldr	r3, [r5, #16]
 8005c1a:	b99b      	cbnz	r3, 8005c44 <_vfiprintf_r+0x5c>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 f93a 	bl	8005e98 <__swsetup_r>
 8005c24:	b170      	cbz	r0, 8005c44 <_vfiprintf_r+0x5c>
 8005c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c28:	07dc      	lsls	r4, r3, #31
 8005c2a:	d504      	bpl.n	8005c36 <_vfiprintf_r+0x4e>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	b01d      	add	sp, #116	; 0x74
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	0598      	lsls	r0, r3, #22
 8005c3a:	d4f7      	bmi.n	8005c2c <_vfiprintf_r+0x44>
 8005c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3e:	f7fe f9cf 	bl	8003fe0 <__retarget_lock_release_recursive>
 8005c42:	e7f3      	b.n	8005c2c <_vfiprintf_r+0x44>
 8005c44:	2300      	movs	r3, #0
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c52:	2330      	movs	r3, #48	; 0x30
 8005c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e08 <_vfiprintf_r+0x220>
 8005c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c5c:	f04f 0901 	mov.w	r9, #1
 8005c60:	4623      	mov	r3, r4
 8005c62:	469a      	mov	sl, r3
 8005c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c68:	b10a      	cbz	r2, 8005c6e <_vfiprintf_r+0x86>
 8005c6a:	2a25      	cmp	r2, #37	; 0x25
 8005c6c:	d1f9      	bne.n	8005c62 <_vfiprintf_r+0x7a>
 8005c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c72:	d00b      	beq.n	8005c8c <_vfiprintf_r+0xa4>
 8005c74:	465b      	mov	r3, fp
 8005c76:	4622      	mov	r2, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa2 	bl	8005bc4 <__sfputs_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f000 80a9 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c88:	445a      	add	r2, fp
 8005c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a1 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca0:	f10a 0a01 	add.w	sl, sl, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cac:	931a      	str	r3, [sp, #104]	; 0x68
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb6:	4854      	ldr	r0, [pc, #336]	; (8005e08 <_vfiprintf_r+0x220>)
 8005cb8:	f7fa fa92 	bl	80001e0 <memchr>
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	b9d8      	cbnz	r0, 8005cf8 <_vfiprintf_r+0x110>
 8005cc0:	06d1      	lsls	r1, r2, #27
 8005cc2:	bf44      	itt	mi
 8005cc4:	2320      	movmi	r3, #32
 8005cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cca:	0713      	lsls	r3, r2, #28
 8005ccc:	bf44      	itt	mi
 8005cce:	232b      	movmi	r3, #43	; 0x2b
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cda:	d015      	beq.n	8005d08 <_vfiprintf_r+0x120>
 8005cdc:	9a07      	ldr	r2, [sp, #28]
 8005cde:	4654      	mov	r4, sl
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cec:	3b30      	subs	r3, #48	; 0x30
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d94d      	bls.n	8005d8e <_vfiprintf_r+0x1a6>
 8005cf2:	b1b0      	cbz	r0, 8005d22 <_vfiprintf_r+0x13a>
 8005cf4:	9207      	str	r2, [sp, #28]
 8005cf6:	e014      	b.n	8005d22 <_vfiprintf_r+0x13a>
 8005cf8:	eba0 0308 	sub.w	r3, r0, r8
 8005cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	46a2      	mov	sl, r4
 8005d06:	e7d2      	b.n	8005cae <_vfiprintf_r+0xc6>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	9103      	str	r1, [sp, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfbb      	ittet	lt
 8005d14:	425b      	neglt	r3, r3
 8005d16:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1a:	9307      	strge	r3, [sp, #28]
 8005d1c:	9307      	strlt	r3, [sp, #28]
 8005d1e:	bfb8      	it	lt
 8005d20:	9204      	strlt	r2, [sp, #16]
 8005d22:	7823      	ldrb	r3, [r4, #0]
 8005d24:	2b2e      	cmp	r3, #46	; 0x2e
 8005d26:	d10c      	bne.n	8005d42 <_vfiprintf_r+0x15a>
 8005d28:	7863      	ldrb	r3, [r4, #1]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d134      	bne.n	8005d98 <_vfiprintf_r+0x1b0>
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	9203      	str	r2, [sp, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfb8      	it	lt
 8005d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d3e:	3402      	adds	r4, #2
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e18 <_vfiprintf_r+0x230>
 8005d46:	7821      	ldrb	r1, [r4, #0]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fa fa48 	bl	80001e0 <memchr>
 8005d50:	b138      	cbz	r0, 8005d62 <_vfiprintf_r+0x17a>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	eba0 000a 	sub.w	r0, r0, sl
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	3401      	adds	r4, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	4829      	ldr	r0, [pc, #164]	; (8005e0c <_vfiprintf_r+0x224>)
 8005d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	f7fa fa37 	bl	80001e0 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d03f      	beq.n	8005df6 <_vfiprintf_r+0x20e>
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <_vfiprintf_r+0x228>)
 8005d78:	bb1b      	cbnz	r3, 8005dc2 <_vfiprintf_r+0x1da>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	3308      	adds	r3, #8
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	443b      	add	r3, r7
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	e768      	b.n	8005c60 <_vfiprintf_r+0x78>
 8005d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d92:	460c      	mov	r4, r1
 8005d94:	2001      	movs	r0, #1
 8005d96:	e7a6      	b.n	8005ce6 <_vfiprintf_r+0xfe>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4620      	mov	r0, r4
 8005da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005daa:	3a30      	subs	r2, #48	; 0x30
 8005dac:	2a09      	cmp	r2, #9
 8005dae:	d903      	bls.n	8005db8 <_vfiprintf_r+0x1d0>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <_vfiprintf_r+0x15a>
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	e7c4      	b.n	8005d42 <_vfiprintf_r+0x15a>
 8005db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e7f0      	b.n	8005da4 <_vfiprintf_r+0x1bc>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dca:	a904      	add	r1, sp, #16
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7fd fb9d 	bl	800350c <_printf_float>
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	1c78      	adds	r0, r7, #1
 8005dd6:	d1d6      	bne.n	8005d86 <_vfiprintf_r+0x19e>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7fe f8fb 	bl	8003fe0 <__retarget_lock_release_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	065b      	lsls	r3, r3, #25
 8005dee:	f53f af1d 	bmi.w	8005c2c <_vfiprintf_r+0x44>
 8005df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df4:	e71c      	b.n	8005c30 <_vfiprintf_r+0x48>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7fd fe27 	bl	8003a54 <_printf_i>
 8005e06:	e7e4      	b.n	8005dd2 <_vfiprintf_r+0x1ea>
 8005e08:	0800631c 	.word	0x0800631c
 8005e0c:	08006326 	.word	0x08006326
 8005e10:	0800350d 	.word	0x0800350d
 8005e14:	08005bc5 	.word	0x08005bc5
 8005e18:	08006322 	.word	0x08006322

08005e1c <__swbuf_r>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	460e      	mov	r6, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	4605      	mov	r5, r0
 8005e24:	b118      	cbz	r0, 8005e2e <__swbuf_r+0x12>
 8005e26:	6a03      	ldr	r3, [r0, #32]
 8005e28:	b90b      	cbnz	r3, 8005e2e <__swbuf_r+0x12>
 8005e2a:	f7fd ffc1 	bl	8003db0 <__sinit>
 8005e2e:	69a3      	ldr	r3, [r4, #24]
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	071a      	lsls	r2, r3, #28
 8005e36:	d525      	bpl.n	8005e84 <__swbuf_r+0x68>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	b31b      	cbz	r3, 8005e84 <__swbuf_r+0x68>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	6922      	ldr	r2, [r4, #16]
 8005e40:	1a98      	subs	r0, r3, r2
 8005e42:	6963      	ldr	r3, [r4, #20]
 8005e44:	b2f6      	uxtb	r6, r6
 8005e46:	4283      	cmp	r3, r0
 8005e48:	4637      	mov	r7, r6
 8005e4a:	dc04      	bgt.n	8005e56 <__swbuf_r+0x3a>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7ff fd9e 	bl	8005990 <_fflush_r>
 8005e54:	b9e0      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	701e      	strb	r6, [r3, #0]
 8005e64:	6962      	ldr	r2, [r4, #20]
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d004      	beq.n	8005e76 <__swbuf_r+0x5a>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	07db      	lsls	r3, r3, #31
 8005e70:	d506      	bpl.n	8005e80 <__swbuf_r+0x64>
 8005e72:	2e0a      	cmp	r6, #10
 8005e74:	d104      	bne.n	8005e80 <__swbuf_r+0x64>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fd89 	bl	8005990 <_fflush_r>
 8005e7e:	b938      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e80:	4638      	mov	r0, r7
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f806 	bl	8005e98 <__swsetup_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0d5      	beq.n	8005e3c <__swbuf_r+0x20>
 8005e90:	f04f 37ff 	mov.w	r7, #4294967295
 8005e94:	e7f4      	b.n	8005e80 <__swbuf_r+0x64>
	...

08005e98 <__swsetup_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <__swsetup_r+0xac>)
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b118      	cbz	r0, 8005eac <__swsetup_r+0x14>
 8005ea4:	6a03      	ldr	r3, [r0, #32]
 8005ea6:	b90b      	cbnz	r3, 8005eac <__swsetup_r+0x14>
 8005ea8:	f7fd ff82 	bl	8003db0 <__sinit>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb2:	0718      	lsls	r0, r3, #28
 8005eb4:	d422      	bmi.n	8005efc <__swsetup_r+0x64>
 8005eb6:	06d9      	lsls	r1, r3, #27
 8005eb8:	d407      	bmi.n	8005eca <__swsetup_r+0x32>
 8005eba:	2309      	movs	r3, #9
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e034      	b.n	8005f34 <__swsetup_r+0x9c>
 8005eca:	0758      	lsls	r0, r3, #29
 8005ecc:	d512      	bpl.n	8005ef4 <__swsetup_r+0x5c>
 8005ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed0:	b141      	cbz	r1, 8005ee4 <__swsetup_r+0x4c>
 8005ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d002      	beq.n	8005ee0 <__swsetup_r+0x48>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7fe fefe 	bl	8004cdc <_free_r>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	2300      	movs	r3, #0
 8005eee:	6063      	str	r3, [r4, #4]
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f043 0308 	orr.w	r3, r3, #8
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	b94b      	cbnz	r3, 8005f14 <__swsetup_r+0x7c>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d003      	beq.n	8005f14 <__swsetup_r+0x7c>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f884 	bl	800601c <__smakebuf_r>
 8005f14:	89a0      	ldrh	r0, [r4, #12]
 8005f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1a:	f010 0301 	ands.w	r3, r0, #1
 8005f1e:	d00a      	beq.n	8005f36 <__swsetup_r+0x9e>
 8005f20:	2300      	movs	r3, #0
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	425b      	negs	r3, r3
 8005f28:	61a3      	str	r3, [r4, #24]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	b943      	cbnz	r3, 8005f40 <__swsetup_r+0xa8>
 8005f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f32:	d1c4      	bne.n	8005ebe <__swsetup_r+0x26>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	0781      	lsls	r1, r0, #30
 8005f38:	bf58      	it	pl
 8005f3a:	6963      	ldrpl	r3, [r4, #20]
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	e7f4      	b.n	8005f2a <__swsetup_r+0x92>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f7      	b.n	8005f34 <__swsetup_r+0x9c>
 8005f44:	20000068 	.word	0x20000068

08005f48 <_raise_r>:
 8005f48:	291f      	cmp	r1, #31
 8005f4a:	b538      	push	{r3, r4, r5, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	d904      	bls.n	8005f5c <_raise_r+0x14>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f5e:	b112      	cbz	r2, 8005f66 <_raise_r+0x1e>
 8005f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f64:	b94b      	cbnz	r3, 8005f7a <_raise_r+0x32>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f830 	bl	8005fcc <_getpid_r>
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4620      	mov	r0, r4
 8005f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f76:	f000 b817 	b.w	8005fa8 <_kill_r>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d00a      	beq.n	8005f94 <_raise_r+0x4c>
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	d103      	bne.n	8005f8a <_raise_r+0x42>
 8005f82:	2316      	movs	r3, #22
 8005f84:	6003      	str	r3, [r0, #0]
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7e7      	b.n	8005f5a <_raise_r+0x12>
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f90:	4628      	mov	r0, r5
 8005f92:	4798      	blx	r3
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7e0      	b.n	8005f5a <_raise_r+0x12>

08005f98 <raise>:
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <raise+0xc>)
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfd3 	b.w	8005f48 <_raise_r>
 8005fa2:	bf00      	nop
 8005fa4:	20000068 	.word	0x20000068

08005fa8 <_kill_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_kill_r+0x20>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f7fb f9c1 	bl	800133c <_kill>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d102      	bne.n	8005fc4 <_kill_r+0x1c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b103      	cbz	r3, 8005fc4 <_kill_r+0x1c>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2000041c 	.word	0x2000041c

08005fcc <_getpid_r>:
 8005fcc:	f7fb b9ae 	b.w	800132c <_getpid>

08005fd0 <__swhatbuf_r>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	b096      	sub	sp, #88	; 0x58
 8005fdc:	4615      	mov	r5, r2
 8005fde:	461e      	mov	r6, r3
 8005fe0:	da0d      	bge.n	8005ffe <__swhatbuf_r+0x2e>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	bf0c      	ite	eq
 8005fee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ff2:	2340      	movne	r3, #64	; 0x40
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	6031      	str	r1, [r6, #0]
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	b016      	add	sp, #88	; 0x58
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	466a      	mov	r2, sp
 8006000:	f000 f848 	bl	8006094 <_fstat_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	dbec      	blt.n	8005fe2 <__swhatbuf_r+0x12>
 8006008:	9901      	ldr	r1, [sp, #4]
 800600a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800600e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006012:	4259      	negs	r1, r3
 8006014:	4159      	adcs	r1, r3
 8006016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800601a:	e7eb      	b.n	8005ff4 <__swhatbuf_r+0x24>

0800601c <__smakebuf_r>:
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006020:	079d      	lsls	r5, r3, #30
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	d507      	bpl.n	8006038 <__smakebuf_r+0x1c>
 8006028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2301      	movs	r3, #1
 8006032:	6163      	str	r3, [r4, #20]
 8006034:	b002      	add	sp, #8
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	ab01      	add	r3, sp, #4
 800603a:	466a      	mov	r2, sp
 800603c:	f7ff ffc8 	bl	8005fd0 <__swhatbuf_r>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	4605      	mov	r5, r0
 8006044:	4630      	mov	r0, r6
 8006046:	f7fe febd 	bl	8004dc4 <_malloc_r>
 800604a:	b948      	cbnz	r0, 8006060 <__smakebuf_r+0x44>
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	059a      	lsls	r2, r3, #22
 8006052:	d4ef      	bmi.n	8006034 <__smakebuf_r+0x18>
 8006054:	f023 0303 	bic.w	r3, r3, #3
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	e7e3      	b.n	8006028 <__smakebuf_r+0xc>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	6163      	str	r3, [r4, #20]
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	6120      	str	r0, [r4, #16]
 8006072:	b15b      	cbz	r3, 800608c <__smakebuf_r+0x70>
 8006074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f81d 	bl	80060b8 <_isatty_r>
 800607e:	b128      	cbz	r0, 800608c <__smakebuf_r+0x70>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	431d      	orrs	r5, r3
 8006090:	81a5      	strh	r5, [r4, #12]
 8006092:	e7cf      	b.n	8006034 <__smakebuf_r+0x18>

08006094 <_fstat_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d07      	ldr	r5, [pc, #28]	; (80060b4 <_fstat_r+0x20>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	f7fb f9aa 	bl	80013fa <_fstat>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d102      	bne.n	80060b0 <_fstat_r+0x1c>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	b103      	cbz	r3, 80060b0 <_fstat_r+0x1c>
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	bf00      	nop
 80060b4:	2000041c 	.word	0x2000041c

080060b8 <_isatty_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	; (80060d4 <_isatty_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fb f9a9 	bl	800141a <_isatty>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_isatty_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_isatty_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	2000041c 	.word	0x2000041c

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
